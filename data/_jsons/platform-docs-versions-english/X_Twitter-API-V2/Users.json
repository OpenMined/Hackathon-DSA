{
    "0": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tIntroduction\n\nContent: \n## Introduction  \nThe RESTful endpoint uses the GET method to return information about a user or group of users, specified by a user ID or a username. The response includes one or many [user objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),\u00a0which deliver fields such as the Follower count, location, pinned Tweet ID, and profile bio. Responses can also optionally include expansions to return the full Tweet object for a user\u2019s pinned Tweet, including the Tweet text, author, and other Tweet fields.  \nYou can authenticate your request to all users lookup endpoints other than the authenticated user lookup with [OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a), [App only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only), or [OAuth 2.0 Authorization code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code). However, if you would like to access private metrics or data from private users, you will need to utilize OAuth 1.0a User Context or OAuth 2.0 Authorization Code with PKCE, and pass the authenticated users' Access Token with your request.  \nThis endpoint is commonly used to receive up-to-date details on a user, to verify that a user exists, or to update your stored details following a compliance event.\n",
        "line_start": 2,
        "line_end": 6,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "1": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tIntroduction\n\tAuthenticated user lookup\n\nContent: \n### Authenticated user lookup  \nIf authenticating on behalf of other users, it is critical to be able to see who you can make a request on behalf of.  \nThis endpoint requires you to use [OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) or [OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code). It returns information about the authorized user, meaning the user that is associated with the user Access Tokens that you pass with the request.  \nYou can access this endpoint via the GET method. There is a user rate limit of 75 requests per 15 minutes for this endpoint.  \n**Account setup**  \nTo access these endpoints, you will need:  \n* An approved\u00a0[developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info).\n* To authenticate using the keys and tokens from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is located within a\u00a0[Project](https://developer.twitter.com/en/docs/projects).  \nLearn more about getting access to the Twitter API v2 endpoints in our\u00a0[getting started guide](https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api).  \n[Quick start](https://developer.twitter.com/en/docs/twitter-api/users/lookup/quick-start)  \n[Sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)  \n[Run in Postman](https://t.co/twitter-api-postman)  \n[Try with API Explorer](https://developer.twitter.com/apitools/api?endpoint=/2/users&method=get)\n",
        "line_start": 10,
        "line_end": 23,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "2": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tSupporting resources\n\nContent: \n## Supporting resources  \n[Learn how to use Postman to make requests](https://developer.twitter.com/en/docs/tutorials/postman-getting-started \"Learn how to use Postman to make requests\")  \n[Troubleshoot an error](https://developer.twitter.com/en/support/twitter-api \"Troubleshoot an error\")  \n[Visit the API reference page for this endpoint](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference \"Visit the API reference page for this endpoint\")\n",
        "line_start": 35,
        "line_end": 39,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "3": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tRelevant tutorials\n\nContent: \n## Relevant tutorials  \n[Getting started with R and v2 of the Twitter API](https://developer.twitter.com/en/docs/tutorials/getting-started-with-r-and-v2-of-the-twitter-api \"Getting started with R and v2 of the Twitter API\")  \nUser lookup\n",
        "line_start": 43,
        "line_end": 46,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "4": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGetting started with the users lookup endpoints\n\nContent: \n## Getting started with the users lookup endpoints  \nThis quick start guide will help you make your first request to the users lookup endpoints with a set of specified fields using\u00a0[Postman](https://developer.twitter.com/en/docs/tools-and-libraries/using-postman).  \nIf you would like to see sample code in different languages, please visit our\u00a0[Twitter API v2 sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)\u00a0GitHub\u00a0repository.\n",
        "line_start": 49,
        "line_end": 52,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "5": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGetting started with the users lookup endpoints\n\tPrerequisites\n\nContent: \n### Prerequisites  \nTo complete this guide, you will need to have a set of\u00a0[keys and tokens](https://developer.twitter.com/en/docs/authentication)\u00a0to authenticate your request. You can generate these keys and tokens by following these steps:  \n* [Sign up for a developer account](https://developer.twitter.com/en/apply-for-access)\u00a0and receive approval.\n* Create a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0and an associated\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0in the developer portal.\n* Navigate to your App's \u201cKeys and tokens\u201d page to generate the required credentials. Make sure to save all credentials in a secure location.\n",
        "line_start": 55,
        "line_end": 60,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "6": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGetting started with the users lookup endpoints\n\tSteps to build a users lookup request\n\nContent: \n### Steps to build a users lookup request  \n#### Step one: Start with a tool or library  \nThere are several different tools, code examples, and libraries that you can use to make a request to this endpoint, but we are going to use the Postman tool here to simplify the process.  \nTo load the Twitter API v2 Postman collection into your environment, please click on the following button:  \n[Add Twitter API v2 to Postman](https://t.co/twitter-api-postman)  \nOnce you have the Twitter API v2 collection loaded in Postman, navigate to the GET /users/by endpoint.  \n#### Step two: Authenticate your request  \nTo properly make a request to the Twitter API, you need to verify that you have permission. To do so, this endpoint requires you to authenticate your request with either\u00a0[App only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only),\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code), or\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0authentication methods.  \nFor simplicity's sake, we will utilize App only with this request, but you will need to use one of the other authentication methods if you'd like to request private\u00a0[metrics](https://developer.twitter.com/en/docs/twitter-api/metrics)\u00a0or users.  \nTo utilize App only, you must add your keys and tokens, specifically the\u00a0[App Access Token](https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens)\u00a0(also known as the App only Bearer Token) to Postman. You can do this by selecting the environment named \u201cTwitter API v2\u201d in the top-right corner of Postman and adding your keys and tokens to the \"initial value\" and \"current value\" fields (by clicking the eye icon next to the environment dropdown).  \nThese variables will automatically be pulled into the request's authorization tab if you've done this correctly.  \n#### Step three: Identify and specify which user(s) you would like to retrieve  \nYou must specify a user or a set of users that you would like to receive within the request. Depending on which user endpoint you use, you can pass either a user ID or a username. In this situation, we are going to use the [GET /users/by endpoint](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by) which allows you to pass multiple usernames in a single request (rather than the [single-ID](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id), [multi-ID](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users), and [single-username](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username) endpoints) and pass a set of usernames using the usernames query parameter.  \nUsernames are simply the account handle that you can find within an account's profile URL. For example, the following account\u2019s username is twitterdev.  \n`https://twitter.com/TwitterDev`  \nIn Postman, navigate to the \"Params\" tab and enter this username, or a string of usernames separated by a comma, into the \"Value\" column of the username\u00a0parameter, making sure to not include any spaces between usernames and commas.  \n|     |     |\n| --- | --- |\n| **Key** | **Value** |\n| `username` | twitterdev,twitterapi,adsapi |  \n#### Step four: Identify and specify which fields you would like to retrieve  \nIf you click the \"Send\" button after step three, you will receive the default [user object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) fields in your response: id, name, and username.  \nIf you would like to receive additional fields beyond id, name, and username, you will have to specify those fields in your request with the [field](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary/introduction/fields) and/or [expansion](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction/expansions) parameters.  \nFor this exercise, we will request a three additional sets of fields from different objects:  \n1. The additional user.created\\_at field in the primary user objects.\n2. The associated pinned Tweets\u2019 object\u2019s default fields for the returned users: id and text.\n3. The additional\u00a0 tweet.created\\_at field in the associated Tweet objects.  \nIn Postman, navigate to the \"Params\" tab and add the following key:value pair to the \"Query Params\" table:  \n|     |     |     |\n| --- | --- | --- |\n| **Key** | **Value** | **Returned fields** |\n| `user.fields` | `created_at` | `user.created_at` |\n| `expansions` | `author_id` | tweet.id,\u00a0tweet.text |\n| `tweet.fields` | `created_at` | `includes.users.created_at` |  \nYou should now see the following URL next to the \"Send\" button:  \n`https://api.twitter.com/2/users/by?usernames=twitterdev,twitterapi,adsapi&user.fields=created_at&expansions=pinned_tweet_id&tweet.fields=author_id,created_at`  \n####\nStep five: Make your request and review your response  \nOnce you have everything set up, hit the \"Send\" button and you will receive the following response:  \n`{   \"data\": [     {       \"created_at\": \"2013-12-14T04:35:55.000Z\",       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\",       \"pinned_tweet_id\": \"1255542774432063488\",       \"username\": \"TwitterDev\"     },     {       \"created_at\": \"2007-05-23T06:01:13.000Z\",       \"id\": \"6253282\",       \"name\": \"Twitter API\",       \"username\": \"TwitterAPI\"     },     {       \"created_at\": \"2013-02-27T20:01:12.000Z\",       \"id\": \"1225933934\",       \"name\": \"Twitter Ads API\",       \"username\": \"AdsAPI\"     }   ],   \"includes\": {     \"tweets\": [       {         \"author_id\": \"2244994945\",         \"created_at\": \"2020-04-29T17:01:38.000Z\",         \"id\": \"1255542774432063488\",         \"text\": \"During these unprecedented times, what\u2019s happening on Twitter can help the world better understand &amp; respond to the pandemic. \\n\\nWe're launching a free COVID-19 stream endpoint so qualified devs &amp; researchers can study the public conversation in real-time. https://t.co/BPqMcQzhId\"       }     ]   } }`\n",
        "line_start": 63,
        "line_end": 103,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "7": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tNext steps\n\nContent: \n## Next steps  \n[Customize your request using the API Reference](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference \"Customize your request using the API Reference\")  \n[Reach out to the community for help](https://twittercommunity.com/ \"Reach out to the community for help\")  \n[Check out some sample code for these endpoints](https://github.com/twitterdev/Twitter-API-v2-sample-code \"Check out some sample code for these endpoints\")  \nAuthenticated user lookup\n",
        "line_start": 137,
        "line_end": 142,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "8": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGetting started with the Authenticated User Lookup endpoint\n\nContent: \n## Getting started with the Authenticated User Lookup endpoint  \nThis quick start guide will help you make your first request to the\u00a0authenticated user lookup endpoint using Postman.  \nPlease visit our\u00a0[Twitter API v2 sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)\u00a0GitHub repository\u00a0if you want to see sample code in different languages.\n",
        "line_start": 147,
        "line_end": 150,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "9": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGetting started with the Authenticated User Lookup endpoint\n\tPrerequisites\n\nContent: \n### Prerequisites  \nTo complete this guide, you will need to have a set of\u00a0[keys and tokens](https://developer.twitter.com/en/docs/authentication)\u00a0to authenticate your request. You can generate these keys and tokens by following these steps:  \n* [Sign up for a developer account](https://developer.twitter.com/en/apply-for-access)\u00a0and receive approval.\n* Create a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0and an associated\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0in the developer portal.\n* Navigate to your App's \u201cKeys and tokens\u201d page to generate the required credentials. Make sure to save all credentials in a secure location.\n",
        "line_start": 55,
        "line_end": 60,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "10": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGetting started with the Authenticated User Lookup endpoint\n\tSteps to build an authenticated user lookup request\n\nContent: \n### Steps to build an authenticated user lookup request  \n#### Step one: Start with a tool or library  \nThere are several different tools, code examples, and libraries that you can use to make a request to this endpoint, but we will use the Postman tool here to simplify the process.  \nTo load the Twitter API v2 Postman collection into your environment, please click on the following button:  \n[Add Twitter API v2 to Postman](https://t.co/twitter-api-postman)  \nOnce you have the Twitter API v2 collection loaded in Postman, navigate to the \u201cAuthenticated User Lookup\u201d folder, and select \u201cLookup an Authenticated User\u201d.  \n#### Step two: Authenticate your request  \nTo properly make a request to the Twitter API, you need to verify that you have permission. To do so with this endpoint, you must authenticate your request using either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code).  \nIn this example, we are going to use OAuth 1.0a User Context.  \nYou must add your keys and tokens \u2013 specifically your API Key, API Secret Key, OAuth 1.0a user Access Token, and OAuth 1.0a user Access Token Secret \u2013 to Postman. You can do this by selecting the environment named \u201cTwitter API v2\u201d in the top-right corner of Postman and adding your keys and tokens to the \"initial value\" and \"current value\" fields (by clicking the eye icon next to the environment dropdown).  \nThese variables will automatically be pulled into the request's authorization tab if you've done this correctly.  \nStep three: Determine which user fields you want to retrieve  \nIf you click the \"Send\" button after step three, you will receive the default [user object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) fields in your response: id, name, and username.  \nIf you would like to receive additional fields beyond id, name, and username, you will have to specify those fields in your request with the [field](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary/introduction/fields) and/or [expansion](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction/expansions) parameters.  \nFor this exercise, we will request three additional sets of fields from different objects:  \n1. The additional user.created\\_at field in the primary user objects.  \n2. The associated pinned Tweets\u2019 object\u2019s default fields for the returned users: id and text.  \n3. The additional tweet.created\\_at field in the associated Tweet objects.  \nIn Postman, navigate to the \"Params\" tab and add the following key:value pair to the \"Query Params\" table:  \n|     |     |     |\n| --- | --- | --- |\n| **Key** | **Value** | **Returned fields** |\n| user.fields | created\\_at | user.created\\_at |\n| expansions | pinned\\_tweet\\_id | includes.tweets.id,  <br>includes.tweets.text |\n| tweet.fields | created\\_at, author\\_id | includes.tweets.created\\_at, includes\\_tweets.author\\_id |  \nYou should now see a similar URL next to the \u201cSend\u201d button:  \n`https://api.twitter.com/2/users/me?user.fields=created_at&expansions=pinned_tweet_id&tweet.fields=author_id,created_at`\n",
        "line_start": 161,
        "line_end": 188,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "11": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tNext steps\n\nContent: \n## Next steps  \n[Customize your request using the API Reference](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference \"Customize your request using the API Reference\")  \n[Reach out to the community for help](https://twittercommunity.com/ \"Reach out to the community for help\")  \nIntegrate\n",
        "line_start": 137,
        "line_end": 141,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "12": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tIntegration guide\n\nContent: \n## Integration guide  \nThis page contains information on several tools and key concepts that you should be aware of as you integrate the users lookup endpoints into your system. We\u2019ve broken the page into a couple of different sections:  \n* [Helpful tools](#helpful)\n* Key Concepts\n* [Authentication](#authentication)\n* [Developer portal, Projects, and Apps](#portal)\n* [Rate limits](#limits)\n* [Fields and expansions](#fields)\n* [Edge cases](#edge)\n",
        "line_start": 221,
        "line_end": 230,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "13": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tIntegration guide\n\tHelpful tools\n\nContent: \n### Helpful tools  \nBefore we dive into some key concepts that will help you integrate this endpoint, we recommend that you become familiar with:  \n#### Postman  \nPostman is a great tool that you can use to test out an endpoint. Each Postman request includes every path and body parameter to help you quickly understand what is available to you. To learn more about our Postman collections, please visit our [\"Using Postman\"](https://developer.twitter.com/en/docs/tools-and-libraries/using-postman) page.  \n#### Code samples  \nInterested in getting set up with this endpoint with some code in your preferred coding language? We\u2019ve got a handful of different code samples available that you can use as a starting point on our [Github page](https://github.com/twitterdev/Twitter-API-v2-sample-code).  \n#### Third-party libraries  \nTake advantage of one of our communities\u2019 [third-party libraries](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries) to help you get started. You can find a library that works with the v2 endpoints by looking for the proper version tag.\n",
        "line_start": 233,
        "line_end": 241,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "14": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tIntegration guide\n\tKey concepts\n\nContent: \n### Key concepts  \n#### Authentication  \nAll Twitter API v2 endpoints require requests to be\u00a0[authenticated](https://developer-staging.twitter.com/en/docs/authentication)\u00a0with a set of credentials, also known as keys and tokens. You can use either OAuth 1.0a User Context, App only, or OAuth 2.0 Authorization Code with PKCE to authenticate requests to these endpoints.  \n[OAuth 1.0a User Context](https://developer-staging.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0requires you to utilize your\u00a0API Keys, user Access Tokens, and a handful of other parameters to\u00a0[create an authorization header](https://developer-staging.twitter.com/en/docs/authentication/oauth-1-0a/authorizing-a-request), which you will then pass with your request. The Access Tokens must be associated with the user that you are making the request on behalf of. If you would like to generate a set of Access Tokens for another user, they must authorize your App using the\u00a0[3-legged OAuth flow](https://developer-staging.twitter.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens).  \nPlease note that OAuth 1.0a can be difficult to use. If you are not familiar with this authentication method, we recommend that you use a\u00a0[library](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries), use\u00a0a tool like Postman, or use OAuth 2.0 to authenticate your requests. If you would like to request a Tweet or private metrics from these endpoints, you will need to use a either OAuth 1.0a User Context or OAuth 2.0 Authorization Code with PKCE, which will ensure that you have the proper permissions from the user that owns that content.  \n[App only](https://developer-staging.twitter.com/en/docs/authentication/oauth-2-0)\u00a0just requires that you pass an\u00a0[App only Access Token](https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens)\u00a0with your request. You can either generate an App only Access Token from directly within a developer App, or generate one using the\u00a0[POST oauth2/token](https://developer-staging.twitter.com/en/docs/authentication/api-reference/token)\u00a0endpoint.  \n[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code)\u00a0allows for greater control over an application\u2019s scope, and authorization flows across multiple devices. OAuth 2.0 allows you to pick specific fine-grained scopes which give you specific permissions on behalf of a user.  \nTo enable OAuth 2.0 in your App, you must enable it in your\u2019s App\u2019s authentication settings found in the App settings section of the developer portal.  \n**Please note**  \nIf you are requesting the following fields, OAuth 1.0a User Context or OAuth 2.0 Authorization Code is required:  \n* tweet.fields.non\\_public\\_metrics\n* tweet.fields.promoted\\_metrics\n* tweet.fields.organic\\_metrics  \n#### Developer portal, Projects, and developer Apps  \nTo retrieve a set of authentication credentials that will work with the Twitter API v2 endpoints, you must [sign up for a\u00a0developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info), set up a [Project](https://developer.twitter.com/en/docs/projects) within that account, and created a [developer App](https://developer.twitter.com/en/docs/apps) within that Project. You can then find your keys and tokens within your developer App.  \n#### Rate limits  \nEvery day, many thousands of developers make requests to the Twitter API. To help manage the sheer volume of these requests, [rate limits](https://developer.twitter.com/en/docs/twitter-api/rate-limits) are placed on each endpoint that limits the number of requests that you can make on behalf of your app or on behalf of an authenticated user.  \nThe user lookup endpoints are rate limited at both the app-level and the user-level. However,\u00a0the authenticated user lookup endpoint is rate limited at the user-level  \nThe app-level rate limit means that you, the developer, can only make a certain number of requests to this endpoint over a given period of time from any given App (assumed by the keys and tokens that you are using. The user-level rate limit means that the authenticated user that you are making the request on behalf of can only perform a certain number of times across any developer App.  \nThe chart below shows the rate limits for each endpoint.  \n|     |     |     |\n| --- | --- | --- |\n| **Endpoint** | **HTTP method** | **Rate limit / Level** |\n| /2/users | GET | 900 requests per 15 minutes / App and User |\n| /2/users/:id | GET | 900 requests per 15 minutes / App and User |\n| /2/users/by | GET | 900 requests per 15\u00a0minutes / App and User |\n| /2/users/by/username/:username | GET | 900 requests per 15\u00a0minutes / App and User |\n| /2/users/me | GET | 75 requests per 15\u00a0minutes / User |  \n#### Fields and expansions  \nThe Twitter API v2 allows users to select exactly which data they want to return from the API using a set of tools called fields and expansions. The expansion parameter allows you to expand objects referenced in the payload. For example, this endpoint allows you to use the pinned\\_tweet\\_id expansion.  \nThe fields parameter allows you to select exactly which [fields](https://developer.twitter.com/en/docs/twitter-api/fields) within the different data objects you would like to receive. These endpoints delivers user objects primarily. By default, the user object returns the\u00a0id, name, and username\u00a0fields. To receive additional fields such as user.created\\_at or user.location, you will have to specifically request those using a fields parameter. Some important fields that you may want to consider using in your integration are our Tweet poll data, metrics, annotations, and conversation ID fields.  \nWe\u2019ve added a guide on how to [use fields and expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/using-fields-and-expansions) in our [Twitter API v2 data dictionary](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction).  \n#### Edge cases  \n* Tweet text is truncated for Retweets. The short term workaround is to expand the referenced Tweet and retrieve the full text from the expansion. This is a bug that we will fix in the future.\n",
        "line_start": 249,
        "line_end": 283,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "15": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tNext steps\n\nContent: \n## Next steps  \n[Visit the API reference page for this endpoint](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference \"Visit the API reference page for this endpoint\")  \nMigrate\n",
        "line_start": 137,
        "line_end": 140,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "16": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tComparing Twitter API\u2019s users lookup endpoints\n\nContent: \n## Comparing Twitter API\u2019s users lookup endpoints  \nThe v2 user lookup endpoints will replace the standard v1.1 [GET users/lookup](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup.html) and [GET users/show](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show.html) endpoints. If you have code, apps, or tools that use one of these versions of the user lookup endpoints, and are considering migrating to the newer Twitter API v2 endpoint, then this set of guides is for you.  \nThe following tables compare the various types of users lookup endpoints:  \n|     |     |     |\n| --- | --- | --- |\n| **Description** | **Standard v1.1** | **Twitter API v2** |\n| HTTP methods supported | `GET` | `GET` |\n| Host domain | `https://api.twitter.com` | `https://api.twitter.com` |\n| Endpoint path | `/1.1/users/show.json` `/1.1/users/lookup.json` | `/2/users`<br><br>`/2/users/:id`<br><br>`/2/users/by`<br><br>`/2/users/by/:username` |\n| [Authentication](https://developer.twitter.com/en/docs/authentication) | OAuth 1.0a User Context | OAuth 1.0a User Context<br><br>App only<br><br>OAuth 2.0 Authorization Code with PKCE |\n| Default request [rate limits](https://developer.twitter.com/en/docs/rate-limits) | 900 requests per 15 min (per user)<br><br>/show - 900 requests per 15 min (per app)  <br>/lookup - 300 requests per 15 min (per app) | 900 requests per 15 min (per user)<br><br>300 requests per 15 min (per app) |\n| Maximum Users per response | /show -\u00a0 1<br><br>/lookup - 100 | 100 |\n| JSON response object format | Standard v1.1 format | [Twitter API v2 format](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary) (determined by fields and expansions request parameters, not backward-compatible with v1.1 formats)<br><br>To learn more about how to migrate from the Standard v1.1 format to the Twitter API v2 format, please visit our [data formats migration guide](https://developer.twitter.com/en/docs/twitter-api/migrate/data-formats). |\n| Supports selecting which [fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary) return in the payload |     | \u2714   |\n| Supports the [annotations](https://developer.twitter.com/en/docs/twitter-api/annotations) fields (on pinned Tweet) |     | \u2714   |\n| Supports requesting new [metrics](https://developer.twitter.com/en/docs/twitter-api/metrics) fields\u00a0(on pinned Tweet) |     | \u2714   |\n| Supports the [conversation\\_id](https://developer.twitter.com/en/docs/twitter-api/conversation-id) field\u00a0(on pinned Tweet) |     | \u2714   |\n| Requires the use of credentials from a [developer App](https://developer.twitter.com/en/docs/apps) associated with a [project](https://developer.twitter.com/en/docs/projects) |     | \u2714   |\n",
        "line_start": 317,
        "line_end": 335,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "17": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tOther migration resources\n\nContent: \n## Other migration resources  \n[User lookup: Standard v1.1 to Twitter API v2](https://developer.twitter.com/en/docs/twitter-api/users/lookup/migrate/standard-to-twitter-api-v2 \"User lookup: Standard v1.1 to Twitter API v2\")  \n[Twitter API migration hub](https://developer.twitter.com/en/docs/twitter-api/migrate \"Twitter API migration hub\")  \n[Check out some sample code for these endpoints](https://github.com/twitterdev/Twitter-API-v2-sample-code \"Check out some sample code for these endpoints\")  \nStandard v1.1 compared to Twitter API v2\n",
        "line_start": 341,
        "line_end": 346,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "18": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tStandard v1.1 compared to Twitter API v2\n\nContent: \n## Standard v1.1 compared to Twitter API v2  \nIf you have been working with the standard v1.1 GET users/show and GET users/lookup, the goal of this guide is to help you understand the similarities and differences between the standard and Twitter API v2 users lookup endpoints.  \n* **Similarities**\n* OAuth 1.0a User Context\n* Users per request limits\n* **Differences**\n* Endpoint URLs\n* App and Project requirements\n* Response data format\n* Request parameters\n",
        "line_start": 351,
        "line_end": 361,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "19": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tStandard v1.1 compared to Twitter API v2\n\tSimilarities\n\nContent: \n### Similarities  \n#### OAuth 1.0a User Context authentication method  \nThe standard endpoint supports [OAuth 1.0a User Context](https://developer.twitter.com/content/developer-twitter/en/docs/authentication/oauth-1-0a), while the new Twitter API v2 users lookup endpoints supports both OAuth 1.0a User Context and [OAuth 2.0 Bearer Token](https://developer.twitter.com/content/developer-twitter/en/docs/authentication/oauth-2-0). Therefore, if you were previously using one of the standard v1.1 users lookup endpoints, you can continue using the same authentication method if you migrate to the Twitter API v2 version.  \nDepending on your authentication library/package of choice, Bearer Token authentication is probably the easiest way to get started and can be set with a simple request header. To learn how to generate a Bearer Token, see [this OAuth 2.0 Bearer Token guide](https://developer.twitter.com/content/developer-twitter/en/docs/basics/authentication/overview/application-only).  \n#### Users per request limits  \nThe standard v1.1 GET users/lookup\u00a0endpoint allows you to specify 100 users per request. This also goes for the GET /users and GET /users/by endpoints. To specify a full 100 users, you will need to pass the ids (GET /users) parameter or the username (GET /users/by) parameter as a query parameter, and include the list of user IDs/usernames in a comma-separated list.\n",
        "line_start": 364,
        "line_end": 370,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "20": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tStandard v1.1 compared to Twitter API v2\n\tDifferences\n\nContent: \n### Differences  \n#### Endpoint URLs  \n* Standard v1.1 endpoints:\n* https://api.twitter.com/1.1/users/show (single-ID or username lookup)\n* https://api.twitter.com/1.1/users/lookup (multi-ID or username lookup)\n* Twitter API v2 endpoint:\n* https://api.twitter.com/2/users (multi-ID lookup)\n* https://api.twitter.com/2/users/:id (single-ID lookup)\n* https://api.twitter.com/2/users/by (multi-username lookup)\n* https://api.twitter.com/2/users/by/username/:username (single-username lookup)  \n#### App and Project requirements  \nThe Twitter API v2 endpoints require that you use credentials from a\u00a0[developer App](https://aem-staging.twitter.biz/content/developer-twitter/en/docs/apps.html)\u00a0that is associated to a\u00a0[Project](https://aem-staging.twitter.biz/content/developer-twitter/en/docs/projects.html)\u00a0when authenticating your requests. All Twitter API v1.1 endpoints can use credentials from standalone Apps or Apps associated with a project.  \n#### Response data format  \nOne of the biggest differences between standard v1.1 and Twitter API v2 endpoint versions is how you select which fields return in your payload.  \nFor the standard endpoints, you receive many of the response fields by default, and then have the option to\u00a0use parameters to identify which fields or sets of fields should return in the payload.  \nThe Twitter API v2 version only delivers the user\u00a0id\u00a0, name, and username\u00a0fields by default. To request any additional fields or objects, you wil need to use the\u00a0[fields](https://developer.twitter.com/en/docs/twitter-api/fields/content/developer-twitter/en/docs/twitter-api/fields)\u00a0and\u00a0[expansions](https://developer.twitter.com/en/docs/twitter-api/fields/content/developer-twitter/en/docs/twitter-api/expansions)\u00a0parameters. Any user fields that you request from this endpoint will return in the primary user object. Any expanded Tweet object and fields will return in an includes object within your response. You can then match any expanded objects back to the user object by matching the IDs located in both the user and the expanded Tweet object.  \nWe encourage you to read more about these new parameters in their respective guides, or by reading our guide on [how to use fields and expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/using-fields-and-expansions).  \nWe have also put together a [data format migration guide](https://developer.twitter.com/en/docs/twitter-api/migrate/data-formats/standard-v1-1-to-v2) which can help you map standard v1.1 fields to the newer v2 fields. This guide will also provide you the specific expansion and field parameter that you will need to pass with your v2 request to return specific fields.  \nIn addition to the changes in how you request certain fields,\u00a0Twitter API v2 is also introducing new JSON designs for the objects returned by the APIs, including\u00a0[Tweet](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet)\u00a0and\u00a0[user](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user)\u00a0objects.  \n* At the JSON root level, the standard endpoints return Tweet objects in a statuses array, while Twitter API v2 returns a data array.\n* Instead of referring to Retweeted and Quoted \"statuses\", Twitter API v2 JSON refers to Retweeted and Quoted Tweets. Many legacy and deprecated fields, such as\u00a0contributors\u00a0and\u00a0user.translator\\_type\u00a0are being removed.\n* Instead of using both\u00a0favorites\u00a0(in Tweet object) and\u00a0favourites\u00a0(in user object), Twitter API v2 uses the term\u00a0like.\n* Twitter is adopting the convention that JSON values with no value (for example,\u00a0null) are not written to the payload. Tweet and user attributes are only included if they have a non-null values.  \nWe also introduced a new set of fields to the\u00a0[Tweet object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet)\u00a0including the following:  \n* A\u00a0[conversation\\_id](https://developer.twitter.com/en/docs/twitter-api/conversation-id) field\n* Two new\u00a0[annotations](https://developer.twitter.com/en/docs/twitter-api/annotations)\u00a0fields, including\u00a0context\u00a0and\u00a0entities\n* Several new\u00a0[metrics](https://developer.twitter.com/en/docs/twitter-api/metrics)\u00a0fields\n* A new reply\\_setting field, which shows you who can reply to a given Tweet  \n#### Request parameters  \nThe following standard v1.1 request parameters have equivalents in Twitter API v2:  \n|     |     |\n| --- | --- |\n| **Standard** | **Twitter API v2** |\n| user\\_id | ids |\n| screen\\_name | username |  \nThere are also a set of standard users lookup request parameters **not**\u00a0supported in Twitter API v2:  \n| Standard | Comment |\n| --- | --- |\n| include\\_entities | This parameter is used to remove the entities node from the Tweet payload.\u00a0 It has been replaced with the additive fields and expansions functionality. |\n",
        "line_start": 377,
        "line_end": 416,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "21": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tNext steps\n\nContent: \n## Next steps  \n[Check out our quick start guide for Twitter API v2 users lookup](https://developer.twitter.com/en/docs/twitter-api/users/lookup/quick-start \"Check out our quick start guide for Twitter API v2 users lookup\")  \n[Review the API reference for users lookup](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference \"Review the API reference for users lookup\")  \n[Check out some sample code for these endpoints](https://github.com/twitterdev/Twitter-API-v2-sample-code \"Check out some sample code for these endpoints\")  \nAPI reference\n",
        "line_start": 137,
        "line_end": 142,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "22": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tAPI reference index\n\nContent: \n## API reference index  \nFor the complete API reference, select an endpoint from the list:  \n|     |     |\n| --- | --- |\n| **Retrieve multiple users with IDs** | `[GET /2/users](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users)` |\n| **Retrieve a single user with an ID** | `[GET /2/users/:id](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id)` |\n| **Retrieve multiple users with usernames  <br>** | `[GET /2/users/by](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by)` |\n| **Retrieve a single user with a usernames** | `[GET /2/users/by/username/:username](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username)` |\n| **Returns the information about an authorized user** | `[GET\u00a0/2/users/me](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me)` |  \nGET /2/users/:id\n",
        "line_start": 449,
        "line_end": 459,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "23": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\nContent: \n# GET /2/users/:id  \nReturns a variety of information about a single user specified by the requested ID.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=findUserById&params=%28%27query%21%28%29%7Ebody%21%28%29%7Epath%21%28%21*%7E**id%21%272244994945%27%29%01*_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D&method=get)\n",
        "line_start": 463,
        "line_end": 468,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "24": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:id`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "25": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\")<br><br>[OAuth 2.0 App-only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only \"Use this method to obtain information in the context of an unauthenticated public user. This method is for developers that just need read-only access to public information. Click to learn how to obtain an OAuth 2.0 App Access Token.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint. |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | App rate limit (Application-only): 300 requests per 15-minute window shared among all users of your app<br><br>User rate limit (User context): 900 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "26": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "27": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Required | string | The ID of the user to lookup. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "28": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 507,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "29": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const getUserById = await twitterClient.users.findUserById(       //The User ID       2244994945     );     console.dir(getUserById, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const getUserById = await twitterClient.users.findUserById(       //The User ID       2244994945,       {         //A comma separated list of User fields to display         \"user.fields\": [\"created_at\"],          //A comma separated list of Tweet fields to display.         \"tweet.fields\": [\"created_at\"],          //A comma separated list of fields to expand         expansions: [\"pinned_tweet_id\"],       }     );     console.dir(getUserById, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | Required. A User ID. String id = \"2244994945\";  try {     SingleUserLookupResponse result = apiInstance.users().findUserById(id, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUserById\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // String | Required. A User ID. String id = \"2244994945\";  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));  // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     SingleUserLookupResponse result = apiInstance.users().findUserById(id, expansions, tweetFields, userFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUserById\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "30": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": {     \"id\": \"2244994945\",     \"name\": \"Twitter Dev\",     \"username\": \"TwitterDev\"   } }`  \n`{   \"data\": {     \"username\": \"TwitterDev\",     \"created_at\": \"2013-12-14T04:35:55.000Z\",     \"pinned_tweet_id\": \"1255542774432063488\",     \"id\": \"2244994945\",     \"name\": \"Twitter Dev\"   },   \"includes\": {     \"tweets\": [       {         \"text\": \"During these unprecedented times, what\u2019s happening on Twitter can help the world better understand &amp; respond to the pandemic. nnWe're launching a free COVID-19 stream endpoint so qualified devs &amp; researchers can study the public conversation in real-time. https://t.co/BPqMcQzhId\",         \"created_at\": \"2020-04-29T17:01:38.000Z\",         \"id\": \"1255542774432063488\"       }     ]   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "31": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |  \nGET /2/users\n",
        "line_start": 554,
        "line_end": 608,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "32": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\nContent: \n# GET /2/users  \nReturns a variety of information about one or more users specified by the requested IDs.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=findUsersById&params=%28%27query%21%28%27*%7Ebody%21%28%29%7Epath%21%28%29%7E**ids%21%272244994945%2C6253282%27%29%01*_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers&method=get)\n",
        "line_start": 611,
        "line_end": 616,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "33": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "34": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 App-only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only \"Use this method to obtain information in the context of an unauthenticated public user. This method is for developers that just need read-only access to public information. Click to learn how to obtain an OAuth 2.0 App Access Token.\")<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint. |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | App rate limit (Application-only): 300 requests per 15-minute window shared among all users of your app<br><br>User rate limit (User context): 900 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "35": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "36": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `ids`  <br>\u00a0Required | string | A comma separated list of user IDs. Up to 100 are allowed in a single request. Make sure to not include a space between commas and fields. |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 508,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "37": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const userIdsLookup = await twitterClient.users.findUsersById({       //A list of User IDs, comma-separated. You can specify up to 100 IDs.       ids: [\"2244994945\", \"6253282\"]     });     console.dir(userIdsLookup, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const userIdsLookup = await twitterClient.users.findUsersById({       //A list of User IDs, comma-separated. You can specify up to 100 IDs.       ids: [\"2244994945\", \"6253282\"],        //A comma separated list of User fields to display       \"user.fields\": [\"created_at\"],        //A comma separated list of Tweet fields to display.       \"tweet.fields\": [\"created_at\"],        //A comma separated list of fields to expand       expansions: [\"pinned_tweet_id\"],     });     console.dir(userIdsLookup, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // List<String> | Required. A list of User IDs, comma-separated. You can specify up to 100 IDs. List<String> ids = Arrays.asList(\"2244994945\", \"6253282\");  try {     MultiUserLookupResponse result = apiInstance.users().findUsersById(ids, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUsersById\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // List<String> | Required. A list of User IDs, comma-separated. You can specify up to 100 IDs. List<String> ids = Arrays.asList(\"2244994945\", \"6253282\");  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));  // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     MultiUserLookupResponse result = apiInstance.users().findUsersById(ids, expansions, tweetFields, userFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUsersById\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "38": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": [     {       \"id\": \"2244994945\",       \"username\": \"TwitterDev\",       \"name\": \"Twitter Dev\"     },     {       \"id\": \"783214\",       \"username\": \"Twitter\",       \"name\": \"Twitter\"     }   ] }`  \n`{   \"data\": [     {       \"created_at\": \"2013-12-14T04:35:55.000Z\",       \"username\": \"TwitterDev\",       \"pinned_tweet_id\": \"1255542774432063488\",       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\"     },     {       \"created_at\": \"2007-02-20T14:35:54.000Z\",       \"username\": \"Twitter\",       \"pinned_tweet_id\": \"1274087687469715457\",       \"id\": \"783214\",       \"name\": \"Twitter\"     }   ],   \"includes\": {     \"tweets\": [       {         \"created_at\": \"2020-04-29T17:01:38.000Z\",         \"text\": \"During these unprecedented times, what\u2019s happening on Twitter can help the world better understand &amp; respond to the pandemic. nnWe're launching a free COVID-19 stream endpoint so qualified devs &amp; researchers can study the public conversation in real-time. https://t.co/BPqMcQzhId\",         \"id\": \"1255542774432063488\"       },       {         \"created_at\": \"2020-06-19T21:12:30.000Z\",         \"text\": \"\ud83d\udccd Minneapolisn\ud83d\udde3\ufe0f @FredTJoseph https://t.co/lNTOkyguG1\",         \"id\": \"1274087687469715457\"       }     ]   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "39": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |  \nGET /2/users/by/username/:username\n",
        "line_start": 554,
        "line_end": 608,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "40": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\nContent: \n# GET /2/users/by/username/:username  \nReturns a variety of information about one or more users specified by their usernames.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=findUserByUsername&params=%28%27query%21%28%29%7Ebody%21%27%27%7Epath%21%28%27*%7E**username%21%27TwitterDev%27%29%01*_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2Fby%2Fusername%2F%7Busername%7D&method=get)\n",
        "line_start": 751,
        "line_end": 756,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "41": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/by/username/:username`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "42": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 App-only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only \"Use this method to obtain information in the context of an unauthenticated public user. This method is for developers that just need read-only access to public information. Click to learn how to obtain an OAuth 2.0 App Access Token.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | App rate limit (Application-only): 300 requests per 15-minute window shared among all users of your app<br><br>User rate limit (User context): 900 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "43": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "44": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `username`  <br>\u00a0Required | string | The Twitter username (handle) of the user. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "45": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 507,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "46": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const usernameLookup = await twitterClient.users.findUserByUsername(       //The Twitter username (handle) of the user.       \"TwitterDev\"     );     console.dir(usernameLookup, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const usernameLookup = await twitterClient.users.findUserByUsername(       //The Twitter username (handle) of the user.       \"TwitterDev\"       {         //A comma separated list of User fields to display         \"user.fields\": [\"created_at\"],                  //A comma separated list of Tweet fields to display.         \"tweet.fields\": [\"created_at\"],                  //A comma separated list of fields to expand         expansions: [\"pinned_tweet_id\"]       }     );     console.dir(usernameLookup, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | Required. A username. String username = \"TwitterDev\";  try {     SingleUserLookupResponse result = apiInstance.users().findUserByUsername(username, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUserByUsername\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // String | Required. A username. String username = \"TwitterDev\";  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));  // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     SingleUserLookupResponse result = apiInstance.users().findUserByUsername(username, expansions, tweetFields, userFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUserByUsername\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "47": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": {     \"id\": \"2244994945\",     \"name\": \"Twitter Dev\",     \"username\": \"TwitterDev\"   } }`  \n`{   \"data\": {     \"username\": \"TwitterDev\",     \"created_at\": \"2013-12-14T04:35:55.000Z\",     \"pinned_tweet_id\": \"1255542774432063488\",     \"id\": \"2244994945\",     \"name\": \"Twitter Dev\"   },   \"includes\": {     \"tweets\": [       {         \"text\": \"During these unprecedented times, what\u2019s happening on Twitter can help the world better understand &amp; respond to the pandemic. nnWe're launching a free COVID-19 stream endpoint so qualified devs &amp; researchers can study the public conversation in real-time. https://t.co/BPqMcQzhId\",         \"created_at\": \"2020-04-29T17:01:38.000Z\",         \"id\": \"1255542774432063488\"       }     ]   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "48": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by/username/:username\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |  \nGET /2/users/by\n",
        "line_start": 554,
        "line_end": 608,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "49": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\nContent: \n# GET /2/users/by  \nReturns a variety of information about one or more users specified by their usernames.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=findUsersByUsername&params=%28%27query%21%28%27*%7Ebody%21%28%29%7Epath%21%28%29%7E**usernames%21%27-Dev%2C-%27%29-Twitter%01-*_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2Fby&method=get)\n",
        "line_start": 899,
        "line_end": 904,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "50": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/by`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "51": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\")<br><br>[OAuth 2.0 App-only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only \"Use this method to obtain information in the context of an unauthenticated public user. This method is for developers that just need read-only access to public information. Click to learn how to obtain an OAuth 2.0 App Access Token.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | App rate limit (Application-only): 300 requests per 15-minute window shared among all users of your app<br><br>User rate limit (User context): 900 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "52": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "53": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `usernames`  <br>\u00a0Required | string | A comma separated list of Twitter usernames (handles). Up to 100 are allowed in a single request. Make sure to not include a space between commas and fields. |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 508,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "54": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const usernamesLookup = await twitterClient.users.findUsersByUsername({       //A list of usernames, comma-separated. You can specify up to 100 usernames.       usernames: [\"TwitterDev\", \"Twitter\"]     });     console.dir(usernamesLookup, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const usernamesLookup = await twitterClient.users.findUsersByUsername({       //A list of usernames, comma-separated. You can specify up to 100 usernames.       usernames: [\"TwitterDev\", \"Twitter\"],        //A comma separated list of User fields to display       \"user.fields\": [\"created_at\"],        //A comma separated list of Tweet fields to display.       \"tweet.fields\": [\"created_at\"],        //A comma separated list of fields to expand       expansions: [\"pinned_tweet_id\"],     });     console.dir(usernamesLookup, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // List<String> | Required . A list of usernames, comma-separated. You can specify up to 100 usernames. List<String> usernames = Arrays.asList(\"TwitterDev\", \"Twitter\");  try {     MultiUserLookupResponse result = apiInstance.users().findUsersByUsername(usernames, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUsersByUsername\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // List<String> | Required . A list of usernames, comma-separated. You can specify up to 100 usernames. List<String> usernames = Arrays.asList(\"TwitterDev\", \"Twitter\");  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));  // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     MultiUserLookupResponse result = apiInstance.users().findUsersByUsername(usernames, expansions, tweetFields, userFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findUsersByUsername\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "55": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": [     {       \"id\": \"2244994945\",       \"username\": \"TwitterDev\",       \"name\": \"Twitter Dev\"     },     {       \"id\": \"783214\",       \"username\": \"Twitter\",       \"name\": \"Twitter\"     }   ] }`  \n`{   \"data\": [     {       \"created_at\": \"2013-12-14T04:35:55.000Z\",       \"username\": \"TwitterDev\",       \"pinned_tweet_id\": \"1255542774432063488\",       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\"     },     {       \"created_at\": \"2007-02-20T14:35:54.000Z\",       \"username\": \"Twitter\",       \"pinned_tweet_id\": \"1274087687469715457\",       \"id\": \"783214\",       \"name\": \"Twitter\"     }   ],   \"includes\": {     \"tweets\": [       {         \"created_at\": \"2020-04-29T17:01:38.000Z\",         \"text\": \"During these unprecedented times, what\u2019s happening on Twitter can help the world better understand &amp; respond to the pandemic. nnWe're launching a free COVID-19 stream endpoint so qualified devs &amp; researchers can study the public conversation in real-time. https://t.co/BPqMcQzhId\",         \"id\": \"1255542774432063488\"       },       {         \"created_at\": \"2020-06-19T21:12:30.000Z\",         \"text\": \"\ud83d\udccd Minneapolisn\ud83d\udde3\ufe0f @FredTJoseph https://t.co/lNTOkyguG1\",         \"id\": \"1274087687469715457\"       }     ]   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "56": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/by\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |  \nGET /2/users/me\n",
        "line_start": 554,
        "line_end": 608,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "57": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\nContent: \n# GET /2/users/me  \nReturns information about an authorized user.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=findMyUser&params=%28%27query%21%28%29%7Ebody%21%27%27%7Epath%21%28%29%29_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2Fme&method=get)\n",
        "line_start": 1039,
        "line_end": 1044,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "58": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/me`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "59": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint. |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | User rate limit (User context): 75 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "60": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "61": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 507,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "62": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const getCurrentUser = await twitterClient.users.findMyUser();     console.dir(getCurrentUser, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const getCurrentUser = await twitterClient.users.findMyUser({       //A comma separated list of User fields to display       \"user.fields\": [\"created_at\"],        //A comma separated list of Tweet fields to display.       \"tweet.fields\": [\"created_at\"],        //A comma separated list of fields to expand       expansions: [\"pinned_tweet_id\"],     });     console.dir(getCurrentUser, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`try {     SingleUserLookupResponse result = apiInstance.users().findMyUser(null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findMyUser\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));  // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     SingleUserLookupResponse result = apiInstance.users().findMyUser(expansions, tweetFields, userFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#findMyUser\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "63": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": {     \"id\": \"2244994945\",     \"name\": \"TwitterDev\",     \"username\": \"Twitter Dev\"   } }`  \n`{   \"data\": {     \"created_at\": \"2013-12-14T04:35:55.000Z\",     \"username\": \"TwitterDev\",     \"pinned_tweet_id\": \"1255542774432063488\",     \"id\": \"2244994945\",     \"name\": \"Twitter Dev\"   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "64": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |  \nIntroduction\n",
        "line_start": 554,
        "line_end": 608,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "65": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tIntroduction\n\nContent: \n## Introduction  \nFollowing users is one of the most foundational actions on Twitter.  \nWe offer two sets of endpoint groups to help you lookup, create, and delete follow relationships: follows lookup and manage follows.\n",
        "line_start": 2,
        "line_end": 5,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "66": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tIntroduction\n\tFollows lookup\n\nContent: \n### Follows lookup  \nThe follows lookup endpoints enable you to explore and analyze relationships between users, which is sometimes called network analysis. Specifically, there are two REST endpoints that return [user objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) representing who a specified user is following, or who is following a specified user.  \nYou can authenticate this endpoint with either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a),\u00a0[App only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only), or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code).\u00a0You can request up to 1,000 users per request, and pagination tokens will be provided for paging through large sets of results.\n",
        "line_start": 1185,
        "line_end": 1188,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "67": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tIntroduction\n\tManage follows\n\nContent: \n### Manage follows  \nThe manage follows endpoints enable you to follow or unfollow users.  \nSince you are making requests on behalf of a user, you must authenticate these endpoints with either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code), and utilize the user Access Tokens associated with the user you are making the request on behalf of. You can generate this user Access Token using the\u00a0[3-legged OAuth flow](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens)\u00a0(OAuth 1.0a) or using the\u00a0[Authorization Code with PKCE grant flow](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token)\u00a0(OAuth 2.0).  \nYou are limited to 400 follow actions per day on behalf of each authenticated user, and will be limited to 1,000 actions per day per App across all of your authenticated users. For example, if you have five authenticated users, you can follow 400 users per day (per user limit) with two of those users for a total of 800 actions, and will have to split the remaining 200 actions (per app) amongst the remaining three users. This limit does not apply to the unfollow endpoint, which has a separate limit of 500 actions per day (per app).  \n**Account setup**  \nTo access these endpoints, you will need:  \n* An approved\u00a0[developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info).\n* To authenticate using the keys and tokens from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is located within a\u00a0[Project](https://developer.twitter.com/en/docs/projects).  \nLearn more about getting access to the Twitter API v2 endpoints in our\u00a0[getting started guide](https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api).  \n[Quick start](https://developer.twitter.com/en/docs/twitter-api/users/follows/quick-start)  \n[Sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)  \n[Run in Postman](https://t.co/twitter-api-postman)  \n[Try with API Explorer](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D%2Ffollowers&method=get)\n",
        "line_start": 1192,
        "line_end": 1205,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "68": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tSupporting resources\n\nContent: \n## Supporting resources  \n[Learn how to use Postman to make requests](https://developer.twitter.com/en/docs/tutorials/postman-getting-started \"Learn how to use Postman to make requests\")  \n[Troubleshoot an error](https://developer.twitter.com/en/support/twitter-api \"Troubleshoot an error\")  \n[Visit the API reference page for this endpoint](https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference \"Visit the API reference page for this endpoint\")  \nManage follows quick start\n",
        "line_start": 35,
        "line_end": 40,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "69": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tGetting started with the manage follows endpoints\n\nContent: \n## Getting started with the manage follows endpoints  \nThis quick start guide will help you make your first request to the manage follows endpoints using\u00a0[Postman](https://developer.twitter.com/en/docs/tutorials/postman-getting-started).  \nIf you would like to see sample code in different languages, please visit our\u00a0[Twitter API v2 sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)\u00a0GitHub\u00a0repository.\n",
        "line_start": 1227,
        "line_end": 1230,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "70": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tGetting started with the manage follows endpoints\n\tPrerequisites\n\nContent: \n### Prerequisites  \nTo complete this guide, you will need to have a set of\u00a0[keys and tokens](https://developer.twitter.com/en/docs/authentication)\u00a0to authenticate your request. You can generate these keys and tokens by following these steps:  \n* [Sign up for a developer account](https://developer.twitter.com/en/apply-for-access)\u00a0and receive approval.\n* Create a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0and an associated\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0in the developer portal.\n* Navigate to your App's \u201cKeys and tokens\u201d page to generate the required credentials. Make sure to save all credentials in a secure location.\n",
        "line_start": 55,
        "line_end": 60,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "71": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tGetting started with the manage follows endpoints\n\tSteps to build a manage follows request\n\nContent: \n### Steps to build a manage follows request  \n#### Step one: Start with a tool or library  \nThere are several different tools, code examples, and libraries that you can use to make a request to this endpoint, but we are going to use the Postman tool here to simplify the process.  \nTo load the Twitter API v2 Postman collection into your environment, please click on the following button:  \n[Add Twitter API v2 to Postman](https://t.co/twitter-api-postman)  \nOnce you have the Twitter API v2 collection loaded in Postman, navigate to the \u201cFollows\u201d folder, and select \u201cFollow a user ID\u201d.  \n#### Step two: Authenticate your request  \nTo properly make a request to the Twitter API, you need to verify that you have permission. To do so with this endpoint, you must authenticate your request using either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code).  \nIn this example, we are going to use OAuth 1.0a User Context.  \nYou must add your keys and tokens \u2013 specifically your API Key, API Secret Key, OAuth 1.0a user Access Token, and OAuth 1.0a user Access Token Secret \u2013 to Postman. You can do this by selecting the environment named \u201cTwitter API v2\u201d in the top-right corner of Postman and adding your keys and tokens to the \"initial value\" and \"current value\" fields (by clicking the eye icon next to the environment dropdown).  \nThese variables will automatically be pulled into the request's authorization tab if you've done this correctly.  \n#### Step three: Specify who is going to follow whom  \nManage follows endpoints take two IDs: one for the source user (the user who wishes to follow or unfollow another user) and the target user (the user that will be followed or unfollowed). The source user\u2019s ID must correspond to the user ID of the authenticating user. In this case, you can specify the ID belonging to your own user. You can find your ID in two ways:  \n1. Using the [user lookup by username](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference) endpoint, you can pass a username and receive the id field.\n2. Looking at your Access Token, you will find that the numeric part is your user ID.  \nThe target ID can be any valid user ID. For example the user ID for @TwitterDev is 2244994945.  \nIn Postman, navigate to the \"Params\" tab, and enter your ID into the \"Value\" column of the id path variable. Navigate to the \u201cBody\u201d tab and and 2244994945 (the user ID for @TwitterDev) as the value for the target\\_user\\_id parameter. Making sure to not include any spaces before or after any ID.  \n|     |     |\n| --- | --- |\n| **Key** | **Value** |\n| `id` | (your user ID) |\n| target\\_user\\_id | 2244994945 |  \nIf you click the \"Send\" button, you will receive a response object containing the status of the relationship:  \n* If you receive a \"following\": true, then the id is successfully following the target\\_user\\_id.\n* If you receive a \"pending\": true, then the target\\_user\\_id is protected and must accept your follow request.  \n####\nStep four: Make your request and review your response  \nOnce you have everything set up, hit the \"Send\" button and you will receive the following response:  \n`{     \"data\": {         \"following\": true,         \"pending_follow\": false     } }`  \nSimilarly, if you were trying to unfollow a user, you would use the \"Unfollow a user ID\" request within the same Postman collection. However, both the source\\_user\\_id and target\\_user\\_id parameters should be passed as path variables using the unfollow endpoint.\n",
        "line_start": 1241,
        "line_end": 1271,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "72": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tNext steps\n\nContent: \n## Next steps  \n[Customize your request using the API Reference](https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference \"Customize your request using the API Reference\")  \n[Reach out to the community for help](https://twittercommunity.com/ \"Reach out to the community for help\")  \nMigrate\n",
        "line_start": 137,
        "line_end": 141,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "73": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tComparing Twitter API\u2019s follows endpoints\n\tFollows lookup\n\nContent: \n## Comparing Twitter API\u2019s follows endpoints  \n### Follows lookup  \nThe v2 follows lookup endpoints will replace the standard v1.1\u00a0[followers/ids](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids), v1.1\u00a0[followers/list](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list), v1.1\u00a0[friends/ids](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids), and v1.1\u00a0[friends/list](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list)\u00a0endpoints.  \nThe following tables compare the various types of follows lookup endpoints:  \n|     |     |     |\n| --- | --- | --- |\n| **Description** | **Standard v1.1** | **Twitter API v2** |\n| HTTP methods supported | `GET` | `GET` |\n| Host domain | `https://api.twitter.com` | `https://api.twitter.com` |\n| Endpoint path | /1.1/friends/ids.json<br><br>/1.1/friends/list.json<br><br>/1.1/followers/ids.json<br><br>/1.1/followers/list.json | /2/users/:id/following<br><br>/2/users/:id/followers |\n| [Authentication](https://developer.twitter.com/en/docs/authentication) | OAuth 1.0a User Context<br><br>App only | OAuth 1.0a User Context<br><br>OAuth 2.0\u00a0Authorization Code with PKCE<br><br>App only |\n| Default request [rate limits](https://developer.twitter.com/en/docs/rate-limits) | 15 requests per 15 min (per user)<br><br>15 requests per 15 min (per app) | 15 requests per 15 min (per user)<br><br>15 requests per 15 min (per app) |\n| Maximum users per response | GET friends/id & GET followers/id return a maximum of 5000 users IDs per page.<br><br>  <br><br>GET friends/list & GET followers/list return a maximum of 200 user objects per page. | 1000 user objects per page |\n| Pagination | Token returns in a next\\_cursor field, which can then be passed as the value to the cursor parameter to return the next page of results. | Token returns in a next\\_token field, which can then be passed as the value to the token parameter to return the next page of results.<br><br>The v2 payload also delivers a previous\\_token field, which can also be passed with the pagination\\_token parameter to return the previous page of results. |\n| JSON format | Standard v1.1 format | [Twitter API v2 format](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary) (determined by fields and expansions request parameters, not backward-compatible with v1.1 formats)<br><br>To learn more about how to migrate from the Standard v1.1 format to the Twitter API v2 format, please visit our [data formats migration guide](https://developer.twitter.com/en/docs/twitter-api/migrate/data-formats). |\n| Supports selecting which [fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary) return in the payload |     | \u2714   |\n| Supports the Tweet\u00a0[annotations](https://developer.twitter.com/en/docs/twitter-api/annotations) fields |     | \u2714   |\n| Supports requesting new [metrics](https://developer.twitter.com/en/docs/twitter-api/metrics) fields |     | \u2714   |\n| Supports the [conversation\\_id](https://developer.twitter.com/en/docs/twitter-api/conversation-id) field |     | \u2714   |\n| Requires the use of credentials from a [developer App](https://developer.twitter.com/en/docs/apps) associated with a [project](https://developer.twitter.com/en/docs/projects) |     | \u2714   |\n",
        "line_start": 1307,
        "line_end": 1327,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "74": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tComparing Twitter API\u2019s follows endpoints\n\tManage follows\n\nContent: \n### Manage follows  \nThe v2 manage follows endpoints will replace the standard v1.1 [POST friendships/create](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create) and [POST friendships/destroy](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy) endpoints.  \nThe following tables compare the standard v1.1 and Twitter API v2 create follow endpoints:  \n#### Follow a user  \n| Description | Standard v1.1 | Twitter API v2 |\n| --- | --- | --- |\n| HTTP methods supported | POST | POST |\n| Host domain | https://api.twitter.com | https://api.twitter.com |\n| Endpoint path | /1.1/friendships/create.json | /2/users/:id/following |\n| [Authentication](https://developer.twitter.com/content/developer-twitter/en/docs/authentication) | OAuth 1.0a User Context | OAuth 1.0a User Context<br><br>OAuth 2.0\u00a0Authorization Code with PKCE |\n| Default request [rate limits](https://developer.twitter.com/content/developer-twitter/en/docs/rate-limits) | 50 requests per 15 min | 50 requests per 15 min |\n| Maximum daily operations per users | 400 | 400 |\n| Maximum daily operations per app | 1000 | 1000 |\n| Requires use of credentials from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is associated with a\u00a0[Project](https://developer.twitter.com/en/docs/projects) |     | \u2714\ufe0f  |  \n#### Unfollow a user  \nThe following tables compare the standard v1.1 and Twitter API v2 delete follow endpoints:  \n| Description | Standard v1.1 | Twitter API v2 |\n| --- | --- | --- |\n| HTTP methods supported | POST | DELETE |\n| Host domain | https://api.twitter.com | https://api.twitter.com |\n| Endpoint path | /1.1/friendships/destroy.json | /2/users/:source\\_user\\_id/following/:target\\_user\\_id |\n| [Authentication](https://developer.twitter.com/content/developer-twitter/en/docs/authentication) | OAuth 1.0a User Context | OAuth 1.0a User Context<br><br>OAuth 2.0\u00a0Authorization Code with PKCE |\n| Default request [rate limits](https://developer.twitter.com/content/developer-twitter/en/docs/rate-limits) | 15 requests per 15 min (per user) | 50 requests per 15 min (per user) |\n| Maximum daily operations per app | None | 500 |\n| Requires use of credentials from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is associated with a\u00a0[Project](https://developer.twitter.com/en/docs/projects) |     | \u2714\ufe0f  |\n",
        "line_start": 1192,
        "line_end": 1217,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "75": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tOther migration resources\n\nContent: \n## Other migration resources  \n[Follows lookup: Standard v1.1 to Twitter API v2](https://developer.twitter.com/en/docs/twitter-api/users/follows/migrate/follows-lookup-standard-to-twitter-api-v2 \"Follows lookup: Standard v1.1 to Twitter API v2\")  \n[Manage follows: Standard v1.1 to Twitter API v2](https://developer.twitter.com/en/docs/twitter-api/users/follows/migrate/manage-follows-standard-to-twitter-api-v2 \"Manage follows: Standard v1.1 to Twitter API v2\")  \n[Twitter API migration hub](https://developer.twitter.com/en/docs/twitter-api/migrate \"Twitter API migration hub\")  \nManage follows: Standard v1.1 compared to Twitter API v2\n",
        "line_start": 341,
        "line_end": 346,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "76": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tManage follows: Standard v1.1 compared to Twitter API v2\n\nContent: \n## Manage follows: Standard v1.1 compared to Twitter API v2  \nIf you have been working with the standard v1.1 [POST friendships/create](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create) and [POST friendships/destroy](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy) endpoints, the goal of this guide is to help you understand the similarities and differences between the standard and Twitter API v2 manage follows endpoints.  \n* **Similarities**\n* OAuth 1.0a User Context\n* **Differences**\n* Endpoint URLs\n* App and Project requirements\n* HTTP methods\n* Request parameters\n",
        "line_start": 1375,
        "line_end": 1384,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "77": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tManage follows: Standard v1.1 compared to Twitter API v2\n\tSimilarities\n\nContent: \n### Similarities  \n#### OAuth 1.0a User Context authentication method  \nBoth the endpoint versions support [OAuth 1.0a User Context](https://developer.twitter.com/content/developer-twitter/en/docs/authentication/oauth-1-0a). Therefore, if you were previously using one of the standard v1.1 manage follows endpoints, you can continue using the same authentication method if you migrate to the Twitter API v2 version.\n",
        "line_start": 364,
        "line_end": 367,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "78": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tManage follows: Standard v1.1 compared to Twitter API v2\n\tDifferences\n\nContent: \n### Differences  \n#### Endpoint URLs  \n* Standard v1.1 endpoints:\n* POST https://api.twitter.com/1.1/friendships/create.json\n(follow a user)\n* POST https://api.twitter.com/1.1/friendships/destroy.json\n(unfollow a user)\n* Twitter API v2 endpoint:\n* POST https://api.twitter.com/2/users/:id/following\n(follow a user)\n* DELETE https://api.twitter.com/2/users/:source\\_user\\_id/following/:target\\_user\\_id\n(unfollow a user)  \n#### App and Project requirements  \nThe Twitter API v2 endpoints require that you use credentials from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is associated to a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0when authenticating your requests. All Twitter API v1.1 endpoints can use credentials from standalone Apps or Apps associated with a project.  \n#### Request parameters  \nThe following standard v1.1 request parameters have equivalents in Twitter API v2:  \n| Standard v1.1 | Twitter API v2 |\n| --- | --- |\n| No equivalent | id (POST), source\\_user\\_id (DELETE) |\n| user\\_id | target\\_user\\_id |\n| screen\\_name | No equivalent |  \nPlease note that the Standard v1.1 parameters are passed as query parameters, whereas the Twitter API v2 parameters are passed as body parameters (for the POST endpoint) or path parameters (for the DELETE endpoint).  \nAlso, the v2\u00a0id\u00a0and source\\_user\\_id are not required when using the standard v1.1 endpoints since the Access Tokens passed with OAuth 1.0a User Context inferred which user was initiating the follow/unfollow.\n",
        "line_start": 377,
        "line_end": 400,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "79": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tNext steps\n\nContent: \n## Next steps  \n[Check out our quick start guide for Twitter API v2 manage follows](https://developer.twitter.com/en/docs/twitter-api/users/follows/quick-start/manage-follows \"Check out our quick start guide for Twitter API v2 manage follows\")  \n[Review the API reference for the v2 follows endpoints](https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference \"Review the API reference for the v2 follows endpoints\")  \nAPI reference\n",
        "line_start": 137,
        "line_end": 141,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "80": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tAPI reference index\n\nContent: \n## API reference index  \nFor the complete API reference, select an endpoint from the list:\n",
        "line_start": 449,
        "line_end": 451,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "81": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/me\n\tAPI reference index\n\tManage follows\n\nContent: \n### Manage follows  \n|     |     |\n| --- | --- |\n| **Allows a user ID to follow another user** | `[POST /2/users/:id/following](https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following)` |\n| **Allows a user ID to unfollow another user** | `[DELETE /2/users/:source_user_id/following/:target_user_id](https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following)` |  \nPOST /2/users/:id/following\n",
        "line_start": 1192,
        "line_end": 1198,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "82": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\nContent: \n# POST /2/users/:id/following  \nAllows a user ID to follow another user.  \nIf the target user does not have public Tweets, this endpoint will send a follow request.  \nThe request succeeds with no action when the authenticated user sends a request to a user they're already following, or if they're sending a follower request to a user that does not have public Tweets.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdFollow&params=%28%27query%21%28%29%7Ebody%21%28%27target*2244994945%27%29%7Epath%21%28%21source*6253282%27%29%29*_user_id%21%27%01*_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D%2Ffollowing&method=post)\n",
        "line_start": 1451,
        "line_end": 1458,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "83": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:id/following`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "84": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | User rate limit (User context): 50 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "85": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`follows.write` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "86": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Required | string | The authenticated user ID who you would like to initiate the follow on behalf of. You must pass the [Access Tokens](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token) that relate to this user when authenticating the request. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "87": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tJSON body parameters\n\nContent: \n### JSON body parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `target_user_id`  <br>\u00a0Required | string | The user ID of the user that you would like the `id` to follow. |\n",
        "line_start": 1493,
        "line_end": 1497,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "88": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript](#tab0)\n* [Java](#tab1)  \nTypeScript  \nJava  \n`(async () => {   try {     const followUser = await twitterClient.users.usersIdFollow(       //The ID of the user that is requesting to follow the target user       \"6253282\",       {         //The ID of the user that the source user is requesting to follow         target_user_id: \"2244994945\",       }     );     console.dir(followUser, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  UsersIdFollowRequest usersIdFollowRequest = new UsersIdFollowRequest();  //The ID of the user that the source user is requesting to follow usersIdFollowRequest.targetUserId(\"2244994945\");  // String | The ID of the user that is requesting to follow the target user String id = \"6253282\";  try {     UsersFollowingCreateResponse result = apiInstance.users().usersIdFollow(usersIdFollowRequest, id);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdFollow\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 519,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "89": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tExample responses\n\nContent: \n### Example responses  \n* [Successful response (public user)](#tab0)\n* [Successful response (protected user)](#tab1)  \nSuccessful response (public user)  \nSuccessful response (protected user)  \n`{   \"data\": {     \"following\": true,     \"pending_follow\": false   } }`  \n`{   \"data\": {     \"following\": false,     \"pending_follow\": true   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "90": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/following\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `following` | boolean | Indicates whether the `id` is following the specified user as a result of this request. This value is `false` if the target user does not have public Tweets, as they will have to approve the follower request. |\n| `pending_follow` | boolean | Indicates whether the target user will need to approve the follow request. Note that the authenticated user will follow the target user only when they approve the incoming follower request. |  \nDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n",
        "line_start": 554,
        "line_end": 560,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "91": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\nContent: \n# DELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id  \nAllows a user ID to unfollow another user.  \nThe request succeeds with no action when the authenticated user sends a request to a user they're not following or have already unfollowed.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdUnfollow&params=%28%27query%21%28%29%7Ebody%21%28%29%7Epath%21%28%21source*6253282%27%2C%21target*2244994945%27%29%29*_user_id%21%27%01*_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bsource_user_id%7D%2Ffollowing%2F%7Btarget_user_id%7D&method=delete)\n",
        "line_start": 1541,
        "line_end": 1547,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "92": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:source_user_id/following/:target_user_id`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "93": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint. |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | User rate limit (User context): 50 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "94": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`follows.write` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "95": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `source_user_id`  <br>\u00a0Required | string | The user ID who you would like to initiate the unfollow on behalf of. You must pass the [Access Tokens](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token) that relate to this user when authenticating the request. |\n| `target_user_id`  <br>\u00a0Required | string | The user ID of the user that you would like the `source_user_id` to unfollow. |\n",
        "line_start": 492,
        "line_end": 497,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "96": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript](#tab0)\n* [Java](#tab1)  \nTypeScript  \nJava  \n`(async () => {   try {     const unfollowUser = await twitterClient.users.usersIdUnfollow(       //The ID of the user that is requesting to unfollow the target user       \"2244994945\",        //The ID of the user that the source user is requesting to unfollow       \"6253282\"     );     console.dir(unfollowUser, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | The ID of the user that is requesting to unfollow the target user String sourceUserId = \"2244994945\";  // String | The ID of the user that the source user is requesting to unfollow String targetUserId = \"6253282\";  try {     UsersFollowingDeleteResponse result = apiInstance.users().usersIdUnfollow(sourceUserId, targetUserId);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdUnfollow\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 519,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "97": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\tExample responses\n\nContent: \n### Example responses  \n* [Successful response](#tab0)  \nSuccessful response  \n`{   \"data\": {     \"following\": false   } }`\n",
        "line_start": 539,
        "line_end": 543,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "98": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/following/:target\\_user\\_id\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `following` | boolean | Indicates whether the source\\_user\\_id is unfollowing the specified user as a result of this request. This value is `false` for a successful the unfollow request. |  \nGET /2/users/:id/followers\n",
        "line_start": 554,
        "line_end": 559,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "99": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\nContent: \n# GET /2/users/:id/followers  \nReturns a list of users who are followers of the specified user ID.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdFollowers&params=%28%27query%21%28%29%7Ebody%21%27%27%7Epath%21%28%27*%7E**id%21%272244994945%27%29%01*_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D%2Ffollowers&method=get)\n",
        "line_start": 1614,
        "line_end": 1619,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "100": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:id/followers`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "101": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 App-only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only \"Use this method to obtain information in the context of an unauthenticated public user. This method is for developers that just need read-only access to public information. Click to learn how to obtain an OAuth 2.0 App Access Token.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | App rate limit (Application-only): 15 requests per 15-minute window shared among all users of your app<br><br>User rate limit (User context): 15 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "102": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`follows.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "103": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Required | string | The user ID whose followers you would like to retrieve. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "104": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `max_results`  <br>\u00a0Optional | integer | The maximum number of results to be returned per page. This can be a number between 1 and the 1000. By default, each page will return 100 results. |\n| `pagination_token`  <br>\u00a0Optional | string | Used to request the next page of results if all results weren't returned with the latest request, or to go back to the previous page of results. To return the next page, pass the `next_token` returned in your previous response. To go back one page, pass the `previous_token` returned in your previous response. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 509,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "105": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const getUsersFollowers = await twitterClient.users.usersIdFollowers(       //The ID of the user for whom to return results       \"2244994945\"     );     console.dir(getUsersFollowers, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const getUsersFollowers = await twitterClient.users.usersIdFollowers(       //The ID of the user for whom to return results       \"2244994945\",       {         //A comma separated list of User fields to display         \"user.fields\": [\"created_at\"],                  //A comma separated list of Tweet fields to display.         \"tweet.fields\": [\"created_at\"],                  //A comma separated list of fields to expand         expansions: [\"pinned_tweet_id\"],          //The maximum number of results         max_results: 10,       }     );     console.dir(getUsersFollowers, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";  try {     GenericMultipleUsersLookupResponse result = apiInstance.users().usersIdFollowers(id, null, null, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdFollowers\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";  // Integer | The maximum number of results to be returned. Integer maxResults = 10;  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));   // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     GenericMultipleUsersLookupResponse result = apiInstance.users().usersIdFollowers(id, maxResults, null, userFields, expansions, tweetFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdFollowers\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "106": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": [     {       \"id\": \"6253282\",       \"name\": \"Twitter API\",       \"username\": \"TwitterAPI\"     },     {       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\",       \"username\": \"TwitterDev\"     },     {       \"id\": \"783214\",       \"name\": \"Twitter\",       \"username\": \"Twitter\"     },     {       \"id\": \"95731075\",       \"name\": \"Twitter Safety\",       \"username\": \"TwitterSafety\"     },     {       \"id\": \"3260518932\",       \"name\": \"Twitter Moments\",       \"username\": \"TwitterMoments\"     },     {       \"id\": \"373471064\",       \"name\": \"Twitter Music\",       \"username\": \"TwitterMusic\"     },     {       \"id\": \"791978718\",       \"name\": \"Twitter Official Partner\",       \"username\": \"OfficialPartner\"     },     {       \"id\": \"17874544\",       \"name\": \"Twitter Support\",       \"username\": \"TwitterSupport\"     },     {       \"id\": \"234489024\",       \"name\": \"Twitter Comms\",       \"username\": \"TwitterComms\"     },     {       \"id\": \"1526228120\",       \"name\": \"Twitter Data\",       \"username\": \"TwitterData\"     }   ],   \"meta\": {     \"result_count\": 10,     \"next_token\": \"DFEDBNRFT3MHCZZZ\"   } }`  \n`{   \"data\": [     {       \"pinned_tweet_id\": \"1293595870563381249\",       \"id\": \"6253282\",       \"username\": \"TwitterAPI\",       \"name\": \"Twitter API\"     },     {       \"pinned_tweet_id\": \"1293593516040269825\",       \"id\": \"2244994945\",       \"username\": \"TwitterDev\",       \"name\": \"Twitter Dev\"     },     {       \"id\": \"783214\",       \"username\": \"Twitter\",       \"name\": \"Twitter\"     },     {       \"pinned_tweet_id\": \"1271186240323432452\",       \"id\": \"95731075\",       \"username\": \"TwitterSafety\",       \"name\": \"Twitter Safety\"     },     {       \"id\": \"3260518932\",       \"username\": \"TwitterMoments\",       \"name\": \"Twitter Moments\"     },     {       \"pinned_tweet_id\": \"1293216056274759680\",       \"id\": \"373471064\",       \"username\": \"TwitterMusic\",       \"name\": \"Twitter Music\"     },     {       \"id\": \"791978718\",       \"username\": \"OfficialPartner\",       \"name\": \"Twitter Official Partner\"     },     {       \"pinned_tweet_id\": \"1289000334497439744\",       \"id\": \"17874544\",       \"username\": \"TwitterSupport\",       \"name\": \"Twitter Support\"     },     {       \"pinned_tweet_id\": \"1283543147444711424\",       \"id\": \"234489024\",       \"username\": \"TwitterComms\",       \"name\": \"Twitter Comms\"     },     {       \"id\": \"1526228120\",       \"username\": \"TwitterData\",       \"name\": \"Twitter Data\"     }   ],   \"includes\": {     \"tweets\": [       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           },           {             \"domain\": {               \"id\": \"65\",               \"name\": \"Interests and Hobbies Vertical\",               \"description\": \"Top level interests and hobbies groupings, like Food or Travel\"             },             \"entity\": {               \"id\": \"848920371311001600\",               \"name\": \"Technology\",               \"description\": \"Technology and computing\"             }           },           {             \"domain\": {               \"id\": \"66\",               \"name\": \"Interests and Hobbies Category\",               \"description\": \"A grouping of interests and hobbies entities, like Novelty Food or Destinations\"             },             \"entity\": {               \"id\": \"848921413196984320\",               \"name\": \"Computer programming\",               \"description\": \"Computer programming\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           }         ],         \"id\": \"1293595870563381249\",         \"text\": \"Twitter API v2: Early Access releasednnToday we announced Early Access to the first endpoints of the new Twitter API!nn#TwitterAPI #EarlyAccess #VersionBump https://t.co/g7v3aeIbtQ\"       },       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           },           {             \"domain\": {               \"id\": \"65\",               \"name\": \"Interests and Hobbies Vertical\",               \"description\": \"Top level interests and hobbies groupings, like Food or Travel\"             },             \"entity\": {               \"id\": \"848920371311001600\",               \"name\": \"Technology\",               \"description\": \"Technology and computing\"             }           },           {             \"domain\": {               \"id\": \"66\",               \"name\": \"Interests and Hobbies Category\",               \"description\": \"A grouping of interests and hobbies entities, like Novelty Food or Destinations\"             },             \"entity\": {               \"id\": \"848921413196984320\",               \"name\": \"Computer programming\",               \"description\": \"Computer programming\"             }           }         ],         \"id\": \"1293593516040269825\",         \"text\": \"It\u2019s finally here! \ud83e\udd41 Say hello to the new #TwitterAPI.nnWe\u2019re rebuilding the Twitter API v2 from the ground up to better serve our developer community. And today\u2019s launch is only the beginning.nnhttps://t.co/32VrwpGaJw https://t.co/KaFSbjWUA8\"       },       {         \"id\": \"1271186240323432452\",         \"text\": \"We\u2019re disclosing new state-linked information operations to our public archive \u2014 the only one of its kind in the industry. Originating from the People\u2019s Republic of China (PRC), Russia, and Turkey, all associated accounts and content have been removed. https://t.co/obRqr96iYm\"       },       {         \"id\": \"1293216056274759680\",         \"text\": \"say howdy to your new yeehaw king @orvillepeck\u2014our #ArtistToFollow this month \ud83e\udd20 https://t.co/3pk9fYcPHb\"       },       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           }         ],         \"id\": \"1289000334497439744\",         \"text\": \"We\u2019ve significantly limited access to our internal tools and systems. Until we can safely resume normal operations, our response times to some support needs and reports will be slower. Thank you for your patience as we work through this.\"       },       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           }         ],         \"id\": \"1283543147444711424\",         \"text\": \"Follow @TwitterSupport for the latest on the security incident \u2b07\ufe0f https://t.co/7FKKksJqxV\"       }     ],     \"meta\": {       \"result_count\": 10,       \"next_token\": \"DFEDBNRFT3MHCZZZ\"     }   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "107": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/followers\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |\n| `meta`  <br>\u00a0Default | object | This object contains information about the number of users returned in the current request, and pagination details. |\n| `meta.result_count`  <br>\u00a0Default | integer | The number of users returned in this request. Note that this number may be lower than what was specified in the `max_results` query parameter. |\n| `meta.previous_token` | string | Pagination token for the previous page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To go back to the previous page, passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you are on the first page of results. |\n| `meta.next_token` | string | Pagination token for the next page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To retrieve the full list, keep passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you've reached the last page of results, and that there are no further pages. |  \nGET /2/users/:id/following\n",
        "line_start": 554,
        "line_end": 612,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "108": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\nContent: \n# GET /2/users/:id/following  \nReturns a list of users the specified user ID is following.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdFollowing&params=%28%27query%21%28%29%7Ebody%21%28%29%7Epath%21%28%21id%21%272244994945%27%29%29_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D%2Ffollowing&method=get)\n",
        "line_start": 1768,
        "line_end": 1773,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "109": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:id/following`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "110": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 App-only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only \"Use this method to obtain information in the context of an unauthenticated public user. This method is for developers that just need read-only access to public information. Click to learn how to obtain an OAuth 2.0 App Access Token.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | App rate limit (Application-only): 15 requests per 15-minute window shared among all users of your app<br><br>User rate limit (User context): 15 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "111": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`follows.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "112": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Required | string | The user ID whose following you would like to retrieve. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "113": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `max_results`  <br>\u00a0Optional | integer | The maximum number of results to be returned per page. This can be a number between 1 and the 1000. By default, each page will return 100 results. |\n| `pagination_token`  <br>\u00a0Optional | string | Used to request the next page of results if all results weren't returned with the latest request, or to go back to the previous page of results. To return the next page, pass the `next_token` returned in your previous response. To go back one page, pass the `previous_token` returned in your previous response. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 509,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "114": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const getUsersFollowing = await twitterClient.users.usersIdFollowing(       //The ID of the user for whom to return results       \"2244994945\"     );     console.dir(getUsersFollowing, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const getUsersFollowing = await twitterClient.users.usersIdFollowing(       //The ID of the user for whom to return results       \"2244994945\",       {         //A comma separated list of User fields to display         \"user.fields\": [\"created_at\"],                  //A comma separated list of Tweet fields to display.         \"tweet.fields\": [\"created_at\"],                  //A comma separated list of fields to expand         expansions: [\"pinned_tweet_id\"],          //The maximum number of results         max_results: 10,       }     );     console.dir(getUsersFollowing, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";  try {     UsersFollowingLookupResponse result = apiInstance.users().usersIdFollowing(id, null, null, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdFollowing\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";  // Integer | The maximum number of results to be returned. Integer maxResults = 10;  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));   // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     UsersFollowingLookupResponse result = apiInstance.users().usersIdFollowing(id, maxResults, null, userFields, expansions, tweetFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdFollowing\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "115": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": [     {       \"id\": \"6253282\",       \"name\": \"Twitter API\",       \"username\": \"TwitterAPI\"     },     {       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\",       \"username\": \"TwitterDev\"     },     {       \"id\": \"783214\",       \"name\": \"Twitter\",       \"username\": \"Twitter\"     },     {       \"id\": \"95731075\",       \"name\": \"Twitter Safety\",       \"username\": \"TwitterSafety\"     },     {       \"id\": \"3260518932\",       \"name\": \"Twitter Moments\",       \"username\": \"TwitterMoments\"     },     {       \"id\": \"373471064\",       \"name\": \"Twitter Music\",       \"username\": \"TwitterMusic\"     },     {       \"id\": \"791978718\",       \"name\": \"Twitter Official Partner\",       \"username\": \"OfficialPartner\"     },     {       \"id\": \"17874544\",       \"name\": \"Twitter Support\",       \"username\": \"TwitterSupport\"     },     {       \"id\": \"234489024\",       \"name\": \"Twitter Comms\",       \"username\": \"TwitterComms\"     },     {       \"id\": \"1526228120\",       \"name\": \"Twitter Data\",       \"username\": \"TwitterData\"     }   ],   \"meta\": {     \"result_count\": 10,     \"next_token\": \"DFEDBNRFT3MHCZZZ\"   } }`  \n`{   \"data\": [     {       \"pinned_tweet_id\": \"1293595870563381249\",       \"id\": \"6253282\",       \"username\": \"TwitterAPI\",       \"name\": \"Twitter API\"     },     {       \"pinned_tweet_id\": \"1293593516040269825\",       \"id\": \"2244994945\",       \"username\": \"TwitterDev\",       \"name\": \"Twitter Dev\"     },     {       \"id\": \"783214\",       \"username\": \"Twitter\",       \"name\": \"Twitter\"     },     {       \"pinned_tweet_id\": \"1271186240323432452\",       \"id\": \"95731075\",       \"username\": \"TwitterSafety\",       \"name\": \"Twitter Safety\"     },     {       \"id\": \"3260518932\",       \"username\": \"TwitterMoments\",       \"name\": \"Twitter Moments\"     },     {       \"pinned_tweet_id\": \"1293216056274759680\",       \"id\": \"373471064\",       \"username\": \"TwitterMusic\",       \"name\": \"Twitter Music\"     },     {       \"id\": \"791978718\",       \"username\": \"OfficialPartner\",       \"name\": \"Twitter Official Partner\"     },     {       \"pinned_tweet_id\": \"1289000334497439744\",       \"id\": \"17874544\",       \"username\": \"TwitterSupport\",       \"name\": \"Twitter Support\"     },     {       \"pinned_tweet_id\": \"1283543147444711424\",       \"id\": \"234489024\",       \"username\": \"TwitterComms\",       \"name\": \"Twitter Comms\"     },     {       \"id\": \"1526228120\",       \"username\": \"TwitterData\",       \"name\": \"Twitter Data\"     }   ],   \"includes\": {     \"tweets\": [       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           },           {             \"domain\": {               \"id\": \"65\",               \"name\": \"Interests and Hobbies Vertical\",               \"description\": \"Top level interests and hobbies groupings, like Food or Travel\"             },             \"entity\": {               \"id\": \"848920371311001600\",               \"name\": \"Technology\",               \"description\": \"Technology and computing\"             }           },           {             \"domain\": {               \"id\": \"66\",               \"name\": \"Interests and Hobbies Category\",               \"description\": \"A grouping of interests and hobbies entities, like Novelty Food or Destinations\"             },             \"entity\": {               \"id\": \"848921413196984320\",               \"name\": \"Computer programming\",               \"description\": \"Computer programming\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           }         ],         \"id\": \"1293595870563381249\",         \"text\": \"Twitter API v2: Early Access releasednnToday we announced Early Access to the first endpoints of the new Twitter API!nn#TwitterAPI #EarlyAccess #VersionBump https://t.co/g7v3aeIbtQ\"       },       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           },           {             \"domain\": {               \"id\": \"65\",               \"name\": \"Interests and Hobbies Vertical\",               \"description\": \"Top level interests and hobbies groupings, like Food or Travel\"             },             \"entity\": {               \"id\": \"848920371311001600\",               \"name\": \"Technology\",               \"description\": \"Technology and computing\"             }           },           {             \"domain\": {               \"id\": \"66\",               \"name\": \"Interests and Hobbies Category\",               \"description\": \"A grouping of interests and hobbies entities, like Novelty Food or Destinations\"             },             \"entity\": {               \"id\": \"848921413196984320\",               \"name\": \"Computer programming\",               \"description\": \"Computer programming\"             }           }         ],         \"id\": \"1293593516040269825\",         \"text\": \"It\u2019s finally here! \ud83e\udd41 Say hello to the new #TwitterAPI.nnWe\u2019re rebuilding the Twitter API v2 from the ground up to better serve our developer community. And today\u2019s launch is only the beginning.nnhttps://t.co/32VrwpGaJw https://t.co/KaFSbjWUA8\"       },       {         \"id\": \"1271186240323432452\",         \"text\": \"We\u2019re disclosing new state-linked information operations to our public archive \u2014 the only one of its kind in the industry. Originating from the People\u2019s Republic of China (PRC), Russia, and Turkey, all associated accounts and content have been removed. https://t.co/obRqr96iYm\"       },       {         \"id\": \"1293216056274759680\",         \"text\": \"say howdy to your new yeehaw king @orvillepeck\u2014our #ArtistToFollow this month \ud83e\udd20 https://t.co/3pk9fYcPHb\"       },       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           }         ],         \"id\": \"1289000334497439744\",         \"text\": \"We\u2019ve significantly limited access to our internal tools and systems. Until we can safely resume normal operations, our response times to some support needs and reports will be slower. Thank you for your patience as we work through this.\"       },       {         \"context_annotations\": [           {             \"domain\": {               \"id\": \"46\",               \"name\": \"Brand Category\",               \"description\": \"Categories within Brand Verticals that narrow down the scope of Brands\"             },             \"entity\": {               \"id\": \"781974596752842752\",               \"name\": \"Services\"             }           },           {             \"domain\": {               \"id\": \"47\",               \"name\": \"Brand\",               \"description\": \"Brands and Companies\"             },             \"entity\": {               \"id\": \"10045225402\",               \"name\": \"Twitter\"             }           }         ],         \"id\": \"1283543147444711424\",         \"text\": \"Follow @TwitterSupport for the latest on the security incident \u2b07\ufe0f https://t.co/7FKKksJqxV\"       }     ],     \"meta\": {       \"result_count\": 10,       \"next_token\": \"DFEDBNRFT3MHCZZZ\"     }   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "116": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |\n| `meta`  <br>\u00a0Default | object | This object contains information about the number of users returned in the current request, and pagination details. |\n| `meta.result_count`  <br>\u00a0Default | integer | The number of users returned in this request. Note that this number may be lower than what was specified in the `max_results` query parameter. |\n| `meta.previous_token` | string | Pagination token for the previous page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To go back to the previous page, passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you are on the first page of results. |\n| `meta.next_token` | string | Pagination token for the next page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To retrieve the full list, keep passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you've reached the last page of results, and that there are no further pages. |  \nIntroduction\n",
        "line_start": 554,
        "line_end": 612,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "117": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tIntroduction\n\nContent: \n## Introduction  \nUsing blocks lookup, you can see who you or an authenticated user has blocked. This can be useful for determining how you can interact with a given account.\n",
        "line_start": 2,
        "line_end": 4,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "118": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tIntroduction\n\tBlocks lookup\n\nContent: \n### Blocks lookup  \nThe blocks lookup GET endpoint allows you to see which accounts you\u2019ve blocked on behalf of an authorized user. This endpoint has a rate limit of 15 requests per 15 minutes per user.  \nSince you are making requests for private information with blocks lookup, and on behalf of a user with manage blocks, you must authenticate these endpoints with either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code), and use the user Access Tokens associated with a user that has authorized your App, which can be generated using the\u00a0[3-legged OAuth flow](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens)\u00a0(OAuth 1.0a) or the\u00a0[Authorization Code with PKCE grant flow](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token)\u00a0(OAuth 2.0).  \n**Account setup**  \nTo access these endpoints, you will need:  \n* An approved\u00a0[developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info).\n* To authenticate using the keys and tokens from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is located within a\u00a0[Project](https://developer.twitter.com/en/docs/projects).  \nLearn more about getting access to the Twitter API v2 endpoints in our\u00a0[getting started guide](https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api).  \n[Quick start](https://developer.twitter.com/en/docs/twitter-api/users/blocks/quick-start)  \n[Sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)  \n[Run in Postman](https://t.co/twitter-api-postman)  \n[Try with API Explorer](https://developer.twitter.com/apitools/api?endpoint=/2/users/%7Bid%7D/blocking&method=get)\n",
        "line_start": 1926,
        "line_end": 1938,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "119": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tSupporting resources\n\nContent: \n## Supporting resources  \n[Learn how to use Postman to make requests](https://developer.twitter.com/en/docs/tutorials/postman-getting-started \"Learn how to use Postman to make requests\")  \n[Troubleshoot an error](https://developer.twitter.com/en/support/twitter-api \"Troubleshoot an error\")  \n[Visit the API reference page for this endpoint](https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference \"Visit the API reference page for this endpoint\")  \nBlocks lookup quick start\n",
        "line_start": 35,
        "line_end": 40,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "120": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tGetting started with the blocks lookup endpoint\n\nContent: \n## Getting started with the blocks lookup endpoint  \nThis quick start guide will help you make your first request to the blocks lookup endpoint using\u00a0[Postman](https://developer.twitter.com/en/docs/tools-and-libraries/using-postman).  \nIf you would like to see sample code in different languages, please visit our\u00a0[Twitter API v2 sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)\u00a0GitHub repository.\n",
        "line_start": 1959,
        "line_end": 1962,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "121": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tGetting started with the blocks lookup endpoint\n\tPrerequisites\n\nContent: \n### Prerequisites  \nTo complete this guide, you will need to have a set of\u00a0[keys and tokens](https://developer.twitter.com/en/docs/authentication)\u00a0to authenticate your request. You can generate these keys and tokens by following these steps:  \n* [Sign up for a developer account](https://developer.twitter.com/en/apply-for-access)\u00a0and receive approval.\n* Create a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0and an associated\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0in the developer portal.\n* Navigate to your App's \u201cKeys and tokens\u201d page to generate the required credentials. Make sure to save all credentials in a secure location.\n",
        "line_start": 55,
        "line_end": 60,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "122": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tGetting started with the blocks lookup endpoint\n\tSteps to build a blocks lookup request\n\nContent: \n### Steps to build a blocks lookup request  \n#### Step one: Start with a tool or library  \nThere are several different tools, code examples, and libraries that you can use to make a request to this endpoint, but we will use the Postman tool here to simplify the process.  \nTo load the Twitter API v2 Postman collection into your environment, please click on the following button:  \n[Add Twitter API v2 to Postman](https://t.co/twitter-api-postman)  \nOnce you have the Twitter API v2 collection loaded in Postman, navigate to the \u201cBlocks\u201d folder, and select \u201cBlocks Lookup\u201d.  \n#### Step two: Authenticate your request  \nTo properly make a request to the Twitter API, you need to verify that you have permission. To do so with this endpoint, you must authenticate your request using either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code).  \nIn this example, we are going to use OAuth 1.0a User Context.  \nYou must add your keys and tokens \u2013 specifically your API Key, API Secret Key, OAuth 1.0a user Access Token, and OAuth 1.0a user Access Token Secret \u2013 to Postman. You can do this by selecting the environment named \u201cTwitter API v2\u201d in the top-right corner of Postman and adding your keys and tokens to the \"initial value\" and \"current value\" fields (by clicking the eye icon next to the environment dropdown).  \nThese variables will automatically be pulled into the request's authorization tab if you've done this correctly.  \n#### Step three:\u00a0Specify a user  \nWith this endpoint, you must specify your user ID or the user ID of an authenticated user to see who you have blocked.  \nIn Postman, navigate to the \"Params\" tab and enter this username into the \"Value\" column of the id path variable (at the bottom of the section), making sure to not include any spaces before or after usernames.  \n|     |     |\n| --- | --- |\n| **Key** | **Value** |\n| `id` | (your user ID) |\n| max\\_results | 5   |  \n#### Step four:\u00a0Identify and specify which fields you would like to retrieve  \nIf you click the \"Send\" button after step three, you will receive the default [user object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) fields in your response: id, name, and username.  \nIf you would like to receive additional fields beyond id, name, and username, you will have to specify those fields in your request with the [fields](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary/introduction/fields)\u00a0and/or [expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction/expansions)\u00a0parameters.  \nFor this exercise, we will request three additional sets of fields from different objects:  \n1. The additional user.created\\_at field in the primary user objects.\n2. The associated pinned Tweets\u2019 object\u2019s default fields for the returned users: id and text.\n3. The additional\u00a0 tweet.created\\_at field in the associated Tweet objects.  \nIn Postman, navigate to the \"Params\" tab and add the following key:value pair to the \"Query Params\" table:  \n|     |     |     |\n| --- | --- | --- |\n| **Key** | **Value** | **Returned fields** |\n| user.fields | created\\_at | user.created\\_at |\n| expansions | pinned\\_tweet\\_id | tweet.id, tweet.text |\n| tweet.fields | created\\_at | includes.tweets.created\\_at |  \nYou should now see a similar URL with your own user ID instead of TwitterDev\u2019s URL next to the \"Send\" button:  \n`https://api.twitter.com/2/users/2244994945/blocking?user.fields=created_at&expansions=pinned_tweet_id&tweet.fields=created_at`  \n#### Step five: Make your request and review your response  \nOnce you have everything set up, hit the \"Send\" button and you will receive a similar response to the following example response:  \n`{   \"data\": [     {       \"created_at\": \"2008-12-04T18:51:57.000Z\",       \"id\": \"17874544\",       \"username\": \"TwitterSupport\",       \"name\": \"Twitter Support\"     },     {       \"created_at\": \"2007-02-20T14:35:54.000Z\",       \"id\": \"783214\",       \"username\": \"Twitter\",       \"name\": \"Twitter\"     },     {       \"pinned_tweet_id\": \"1389270063807598594\",       \"created_at\": \"2018-11-21T14:24:58.000Z\",       \"id\": \"1065249714214457345\",       \"username\": \"TwitterSpaces\",       \"name\": \"Spaces\"     },     {       \"pinned_tweet_id\": \"1293595870563381249\",       \"created_at\": \"2007-05-23T06:01:13.000Z\",       \"id\": \"6253282\",       \"username\": \"TwitterAPI\",       \"name\": \"Twitter API\"     }   ],   \"includes\": {     \"tweets\": [       {         \"created_at\": \"2021-05-03T17:26:09.000Z\",         \"id\": \"1389270063807598594\",         \"text\": \"now, everyone with 600 or more followers can host a Space.\\n\\nbased on what we've learned, these accounts are likely to have a good experience hosting because of their existing audience. before bringing the ability to create a Space to everyone, we\u2019re focused on a few things. \ud83e\uddf5\"       },       {         \"created_at\": \"2020-08-12T17:11:04.000Z\",         \"id\": \"1293595870563381249\",         \"text\": \"Twitter API v2: Early Access released\\n\\nToday we announced Early Access to the first endpoints of the new Twitter API!\\n\\n#TwitterAPI #EarlyAccess #VersionBump https://t.co/g7v3aeIbtQ\"       }     ]   }`  \n####\nStep six: Paginate through your results  \nYou may notice that there is a meta object located at the bottom of the response. If you received a next\\_token, this signals that there is another page of results that we can retrieve. To pull the next page of results, you will pull the value of the next\\_token field and add it to the request as the value to an additional pagination\\_token parameter.  \n|     |     |\n| --- | --- |\n| **Key** | **Value** |\n| pagination\\_token | 1D3PU6DRII9HEZZZ |  \nIf you send the request after adding this additional parameter, the next five results will be delivered with the subsequent payload since we specified max\\_results as 5 in step three. You can continue to repeat this process until all results have been returned, but you can also use the max\\_results parameter to request up to 1000 users per request, so you don\u2019t have to paginate through results quite as much.\n",
        "line_start": 1973,
        "line_end": 2019,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "123": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tNext steps\n\nContent: \n## Next steps  \n[Customize your request using the API Reference](https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference \"Customize your request using the API Reference\")  \n[Reach out to the community for help](https://twittercommunity.com/ \"Reach out to the community for help\")  \nIntegrate\n",
        "line_start": 137,
        "line_end": 141,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "124": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tIntegration guide\n\nContent: \n## Integration guide  \nThis page contains information on several tools and key concepts that you should be aware of as you integrate the blocks endpoints into your system. We\u2019ve broken the page into a couple of different sections:  \n* [Helpful tools](#helpful)\n* Key Concepts\n* [Authentication](#authentication)\n* [Developer portal, Projects, and Apps](#portal)\n* [Rate limits](#limits)\n* [Fields and expansions](#fields)\n* [Pagination](#pagination)\n",
        "line_start": 221,
        "line_end": 230,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "125": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tIntegration guide\n\tHelpful tools\n\nContent: \n### Helpful tools  \nBefore we dive into some key concepts that will help you integrate this endpoint, we recommend that you become familiar with:  \n#### Postman  \nPostman is a great tool that you can use to test out an endpoint. Each Postman request includes every path and body parameter to help you quickly understand what is available to you. To learn more about our Postman collections, please visit our [\"Using Postman\"](https://developer.twitter.com/en/docs/tools-and-libraries/using-postman) page.  \n#### Code samples  \nInterested in getting set up with this endpoint with some code in your preferred coding language? We\u2019ve got a handful of different code samples available that you can use as a starting point on our [Github page](https://github.com/twitterdev/Twitter-API-v2-sample-code).  \n#### Third-party libraries  \nTake advantage of one of our communities\u2019 [third-party libraries](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries) to help you get started. You can find a library that works with the v2 endpoints by looking for the proper version tag.\n",
        "line_start": 233,
        "line_end": 241,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "126": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tIntegration guide\n\tKey concepts\n\nContent: \n### Key concepts  \n#### Authentication  \nAll Twitter API v2 endpoints require you to authenticate your requests with a set of credentials, also known as keys and tokens.\u00a0You can use either OAuth 1.0a User Context or OAuth 2.0 Authorization Code with PKCE to authenticate your requests to these endpoints.  \n[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0requires you to utilize your\u00a0API Keys, user Access Tokens, and a handful of other parameters to\u00a0[create an authorization header](https://developer-staging.twitter.com/en/docs/authentication/oauth-1-0a/authorizing-a-request), which you will then pass with your request. The Access Tokens must be associated with the user that you are making the request on behalf of. If you would like to generate a set of Access Tokens for another user, they must authorize your App using the\u00a0[3-legged OAuth flow](https://developer-staging.twitter.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens).  \nPlease note that OAuth 1.0a can be difficult to use. If you are not familiar with this authentication method, we recommend that you use a\u00a0[library](https://developer.twitter.com/content/en/docs/twitter-api/tools-and-libraries), use\u00a0a tool like Postman, or use OAuth 2.0 to authenticate your requests.  \n[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code)\u00a0allows for greater control over an application\u2019s scope, and authorization flows across multiple devices. OAuth 2.0 allows you to pick specific fine-grained scopes which give you specific permissions on behalf of a user.  \nTo enable OAuth 2.0 in your App, you must enable it in your\u2019s App\u2019s authentication settings found in the App settings section of the developer portal.  \n#### Developer portal, Projects, and developer Apps  \nTo retrieve a set of authentication credentials that will work with the Twitter API v2 endpoints, you must\u00a0[sign up for a\u00a0developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info), set up a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0within that account, and created a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0within that Project. You can then find your keys and tokens within your developer App.  \n#### Rate limits  \nEvery day, many thousands of developers make requests to the Twitter API. To help manage the sheer volume of these requests, [rate limits](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/rate-limits) are placed on each endpoint that limits the number of requests that you can make on behalf of your app or on behalf of an authenticated user.  \nThese endpoints are rate limited at the user level, meaning that the authenticated user that you are making the request on behalf of can only call the endpoint a certain number of times across any developer App. There is a user rate limit of 50 requests per 15 minutes per endpoint with both POST and DELETE methods. However, with the GET method, the rate limit is only 15 requests per 15 minutes.  \n#### Fields and expansions  \nThe Twitter API v2 GET endpoints allow users to select exactly which data they want to return from the API using a set of tools called fields and expansions. The expansions parameter allows you to expand objects referenced in the payload. For example, this endpoint allows you to pull the following [expansions](https://developer.twitter.com/en/docs/twitter-api/expansions):  \n* pinned\\_tweet\\_id  \nThe **fields** parameter allows you to select exactly which [fields](https://developer.twitter.com/en/docs/twitter-api/fields) within the different data objects you would like to receive. These endpoints delivers Tweet objects primarily. By default, the Tweet object returns the\u00a0**id** and **text**\u00a0fields. To receive additional fields such as **tweet.created\\_at** or **tweet.entities**, you will have to specifically request those using a **fields** parameter. Some important fields that you may want to consider using in your integration are our poll data, metrics, Tweet annotations, and conversation ID fields.  \nWe\u2019ve added a guide on how to [use fields and expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/using-fields-and-expansions) together to our [Twitter API v2 data dictionary](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction).  \n#### Pagination  \nBlocks lookup can return a lot of data. To ensure we don\u2019t return to many results at any given time, we use pagination. Learn more about how to [paginate through results.](https://developer.twitter.com/en/docs/twitter-api/users/blocks/content/developer-twitter/en/docs/twitter-api/pagination)\n",
        "line_start": 249,
        "line_end": 268,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "127": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tNext steps\n\nContent: \n## Next steps  \n[Visit the API reference page for these endpoint](https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference \"Visit the API reference page for these endpoint\")  \nMigrate\n",
        "line_start": 137,
        "line_end": 140,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "128": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tOther migration resources\n\nContent: \n## Other migration resources  \n[Blocks lookup: Standard v1.1 to Twitter API v2](https://developer.twitter.com/en/docs/twitter-api/users/blocks/migrate/blocks-lookup-standard-to-twitter-api-v2 \"Blocks lookup: Standard v1.1 to Twitter API v2\")  \n[Twitter API migration hub](https://developer.twitter.com/en/docs/twitter-api/migrate \"Twitter API migration hub\")  \nBlocks lookup: Standard v1.1 compared to Twitter API v2\n",
        "line_start": 341,
        "line_end": 345,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "129": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tBlocks lookup: Standard v1.1 compared to Twitter API v2\n\nContent: \n## Blocks lookup: Standard v1.1 compared to Twitter API v2  \nIf you have been working with the standard v1.1 [GET blocks/ids](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids)\u00a0and [GET blocks/list](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-blocks-list)\u00a0endpoints, the goal of this guide is to help you understand the similarities and differences between the standard v1.1 and Twitter API v2 blocks lookup endpoints.  \n* **Similarities**\n* Authentication\n* **Differences**\n* Endpoint URLs  \n* Users per request limits\n* App and Project requirements\n* Response data formats\n* Request parameters\n",
        "line_start": 2147,
        "line_end": 2157,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "130": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tBlocks lookup: Standard v1.1 compared to Twitter API v2\n\tSimilarities\n\nContent: \n### Similarities  \n#### **Authentication**  \nBoth the standard v1.1 and Twitter API v2 blocks lookup endpoints use [OAuth 1.0a User Context](https://developer.twitter.com/content/developer-twitter/en/docs/authentication/oauth-1-0a). Therefore, if you were previously using one of the standard v1.1 blocks lookup endpoints, you can continue using the same authentication method if you migrate to the Twitter API v2 version.\n",
        "line_start": 364,
        "line_end": 367,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "131": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tBlocks lookup: Standard v1.1 compared to Twitter API v2\n\tDifferences\n\nContent: \n### Differences  \n#### Endpoint URLs  \n* Standard v1.1 endpoints:\n* GET https://api.twitter.com/1.1/blocks/ids.json\n(list of user IDs who are blocked by the specified user)\n* GET https://api.twitter.com/1.1/blocks/lists.json\n(list of users who are blocked by the specified user)\n* Twitter API v2 endpoint:\n* GET https://api.twitter.com/2/users/:id/blocking\n(list of users who are blocked by the specified user ID)  \n#### Users per request limits  \nThe standard v1.1 endpoints allow you to return up to 5000 users per request. The new v2 endpoints allow you to return up to 1000 users per request. To return a full 1000 users, you will need to pass max\\_results=1000 as a query parameter; you can then pass the next\\_token returned in the response payload to the pagination\\_token query parameter in your next request.  \n#### App and Project requirements  \nThe Twitter API v2 endpoints require that you use credentials from a [developer App](https://developer.twitter.com/content/developer-twitter/en/docs/apps) that is associated with a [Project](https://developer.twitter.com/content/developer-twitter/en/docs/projects) when authenticating your requests. All Twitter API v1.1 endpoints can use credentials from standalone Apps or Apps associated with a project.  \n#### Response data format  \nOne of the biggest differences between standard v1.1 and Twitter API v2 endpoint versions is how you select which fields return in your payload.  \nFor the standard endpoints, you receive many of the response fields by default, and then have the option to\u00a0use parameters to identify which fields or sets of fields should return in the payload.  \nThe Twitter API v2 version only delivers the user\u00a0id\u00a0, name, and username\u00a0fields by default. To request any additional fields or objects, you wil need to use the\u00a0[fields](https://developer.twitter.com/en/docs/twitter-api/fields/content/developer-twitter/en/docs/twitter-api/fields)\u00a0and\u00a0[expansions](https://developer.twitter.com/en/docs/twitter-api/fields/content/developer-twitter/en/docs/twitter-api/expansions)\u00a0parameters. Any user fields that you request from this endpoint will return in the primary user object. Any expanded Tweet object and fields will return in an includes object within your response. You can then match any expanded objects back to the user object by matching the IDs located in both the user and the expanded Tweet object.  \nWe encourage you to read more about these new parameters in their respective guides, or by reading our guide on [how to use fields and expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/using-fields-and-expansions).  \nWe have also put together a [data format migration guide](https://developer.twitter.com/en/docs/twitter-api/migrate/data-formats/standard-v1-1-to-v2) which can help you map standard v1.1 fields to the newer v2 fields. This guide will also provide you the specific expansion and field parameter that you will need to pass with your v2 request to return specific fields.  \nIn addition to the changes in how you request certain fields,\u00a0Twitter API v2 is also introducing new JSON designs for the objects returned by the APIs, including\u00a0[Tweet](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet)\u00a0and\u00a0[user](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user)\u00a0objects.  \n* At the JSON root level, the standard endpoints return Tweet objects in a statuses array, while Twitter API v2 returns a data array.\n* Instead of referring to Retweeted and Quoted \"statuses\", Twitter API v2 JSON refers to Retweeted and Quoted Tweets. Many legacy and deprecated fields, such as\u00a0contributors\u00a0and\u00a0user.translator\\_type\u00a0are being removed.\n* Instead of using both\u00a0favorites\u00a0(in Tweet object) and\u00a0favourites\u00a0(in user object), Twitter API v2 uses the term\u00a0like.\n* Twitter is adopting the convention that JSON values with no value (for example,\u00a0null) are not written to the payload. Tweet and user attributes are only included if they have a non-null values.  \nWe also introduced a new set of fields to the\u00a0[Tweet object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet)\u00a0including the following:  \n* A\u00a0[conversation\\_id](https://developer.twitter.com/en/docs/twitter-api/conversation-id) field\n* Two new\u00a0[annotations](https://developer.twitter.com/en/docs/twitter-api/annotations)\u00a0fields, including\u00a0context\u00a0and\u00a0entities\n* Several new\u00a0[metrics](https://developer.twitter.com/en/docs/twitter-api/metrics)\u00a0fields\n* A new reply\\_setting field, which shows you who can reply to a given Tweet  \n#### Request parameters  \nThe following standard v1.1 request parameters accepted two request query parameters (user\\_id or screen\\_name). The Twitter API v2 only accepts the numerical user ID, and it must be passed as part of the endpoint path.\n",
        "line_start": 377,
        "line_end": 409,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "132": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tNext steps\n\nContent: \n## Next steps  \n[Review the blocks lookup API references](https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference \"Review the blocks lookup API references\")  \nAPI reference\n",
        "line_start": 137,
        "line_end": 140,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "133": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tAPI reference index\n\nContent: \n## API reference index  \nFor the complete API reference, select an endpoint from the list.\n",
        "line_start": 449,
        "line_end": 451,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "134": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/following\n\tAPI reference index\n\tBlocks lookup\n\nContent: \n### Blocks lookup  \n|     |     |\n| --- | --- |\n| **Returns a list of users who are blocked by the specified user ID** | `[GET\u00a0/2/users/:id/blocking](https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking)` |  \nGET /2/users/:id/blocking\n",
        "line_start": 1926,
        "line_end": 1931,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "135": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\nContent: \n# GET /2/users/:id/blocking  \nReturns a list of users who are blocked by the specified user ID.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdBlocking&params=%28%27query%21%28%29%7Ebody%21%27%27%7Epath%21%28%29%29_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D%2Fblocking&method=get)\n",
        "line_start": 2242,
        "line_end": 2247,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "136": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:id/blocking`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "137": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | User rate limit (User context): 15 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "138": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`block.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "139": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Required | string | The user ID whose blocked users you would like to retrieve. The user\u2019s ID must correspond to the user ID of the authenticating user, meaning that you must pass the [Access Tokens](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token) associated with the user ID when authenticating your request. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "140": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `max_results`  <br>\u00a0Optional | integer | The maximum number of results to be returned per page. This can be a number between 1 and 1000. By default, each page will return 100 results. |\n| `pagination_token`  <br>\u00a0Optional | string | Used to request the next page of results if all results weren't returned with the latest request, or to go back to the previous page of results. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 509,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "141": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const getBlockedUsers = await twitterClient.users.usersIdBlocking(       //The ID of the user for whom to return results       \"2244994945\"     );     console.dir(getBlockedUsers, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const getBlockedUsers = await twitterClient.users.usersIdBlocking(       //The ID of the user for whom to return results       \"2244994945\",       {         //A comma separated list of User fields to display         \"user.fields\": [\"created_at\"],                  //A comma separated list of Tweet fields to display.         \"tweet.fields\": [\"created_at\"],                  //A comma separated list of fields to expand         expansions: [\"pinned_tweet_id\"],          //The maximum number of results         max_results: 10,       }     );     console.dir(getBlockedUsers, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";   try {     GenericMultipleUsersLookupResponse result = apiInstance.users().usersIdBlocking(id, null, null, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdBlocking\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";  // Integer | The maximum number of results to be returned. Integer maxResults = 10;  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));   // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     GenericMultipleUsersLookupResponse result = apiInstance.users().usersIdBlocking(id, maxResults, null, userFields, expansions, tweetFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdBlocking\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "142": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": [     {       \"id\": \"1065249714214457345\",       \"name\": \"Spaces\",       \"username\": \"TwitterSpaces\"     },     {       \"id\": \"783214\",       \"name\": \"Twitter\",       \"username\": \"Twitter\"     },     {       \"id\": \"1526228120\",       \"name\": \"Twitter Data\",       \"username\": \"TwitterData\"     },     {       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\",       \"username\": \"TwitterDev\"     },     {       \"id\": \"6253282\",       \"name\": \"Twitter API\",       \"username\": \"TwitterAPI\"     }   ] }`  \n`{   \"data\": [     {       \"id\": \"1065249714214457345\",       \"created_at\": \"2018-11-21T14:24:58.000Z\",       \"name\": \"Spaces\",       \"pinned_tweet_id\": \"1389270063807598594\",       \"description\": \"Twitter Spaces is where live audio conversations happen.\",       \"username\": \"TwitterSpaces\"     },     {       \"id\": \"783214\",       \"created_at\": \"2007-02-20T14:35:54.000Z\",       \"name\": \"Twitter\",       \"description\": \"What's happening?!\",       \"username\": \"Twitter\"     },     {       \"id\": \"1526228120\",       \"created_at\": \"2013-06-17T23:57:45.000Z\",       \"name\": \"Twitter Data\",       \"description\": \"Data-driven insights about notable moments and conversations from Twitter, Inc., plus tips and tricks to help you get the most out of Twitter data.\",       \"username\": \"TwitterData\"     },     {       \"id\": \"2244994945\",       \"created_at\": \"2013-12-14T04:35:55.000Z\",       \"name\": \"Twitter Dev\",       \"pinned_tweet_id\": \"1354143047324299264\",       \"description\": \"The voice of the #TwitterDev team and your official source for updates, news, and events, related to the #TwitterAPI.\",       \"username\": \"TwitterDev\"     },     {       \"id\": \"6253282\",       \"created_at\": \"2007-05-23T06:01:13.000Z\",       \"name\": \"Twitter API\",       \"pinned_tweet_id\": \"1293595870563381249\",       \"description\": \"Tweets about changes and service issues. Follow @TwitterDev\u00a0for more.\",       \"username\": \"TwitterAPI\"     }   ],   \"includes\": {     \"tweets\": [       {         \"id\": \"1389270063807598594\",         \"text\": \"now, everyone with 600 or more followers can host a Space.nnbased on what we've learned, these accounts are likely to have a good experience hosting because of their existing audience. before bringing the ability to create a Space to everyone, we\u2019re focused on a few things. \ud83e\uddf5\"       },       {         \"id\": \"1354143047324299264\",         \"text\": \"Academics are one of the biggest groups using the #TwitterAPI to research what\u2019s happening. Their work helps make the world (&amp; Twitter) a better place, and now more than ever, we must enable more of it. nIntroducing \ud83e\udd41 the Academic Research product track!nhttps://t.co/nOFiGewAV2\"       },       {         \"id\": \"1293595870563381249\",         \"text\": \"Twitter API v2: Early Access releasednnToday we announced Early Access to the first endpoints of the new Twitter API!nn#TwitterAPI #EarlyAccess #VersionBump https://t.co/g7v3aeIbtQ\"       }     ]   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "143": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |\n| `meta`  <br>\u00a0Default | object | This object contains information about the number of users returned in the current request, and pagination details. |\n| `meta.result_count`  <br>\u00a0Default | integer | The number of users returned in this request. Note that this number may be lower than what was specified in the `max_results` query parameter. |\n| `meta.previous_token` | string | Pagination token for the previous page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To go back to the previous page, passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you are on the first page of results. |\n| `meta.next_token` | string | Pagination token for the next page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To retrieve the full list, keep passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you've reached the last page of results, and that there are no further pages. |  \nIntroduction\n",
        "line_start": 554,
        "line_end": 612,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "144": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tIntroduction\n\nContent: \n## Introduction  \nMuting an account allows you to remove an account's Tweets from your timeline without unfollowing or blocking that account. Muted accounts will not know that you've muted them and you can unmute them at any time.\u00a0With manage mutes endpoints, developers can create safer experiences for people on Twitter. One example of how to build with manage mutes is an application that allows you to mute accounts that might Tweet about specific topics for a specified length of time. With the mutes lookup endpoint, you can see who you or an authenticated user has muted. This can be useful to determine how you interact with the muted accounts.  \nSince you are making requests for private information with mute lookup, and on behalf of a user with manage mutes, you must authenticate these endpoints with either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code), and use the user Access Tokens associated with a user that has authorized your App, which can be generated using the\u00a0[3-legged OAuth flow](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens)\u00a0(OAuth 1.0a) or the\u00a0[Authorization Code with PKCE grant flow](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token)\u00a0(OAuth 2.0).\n",
        "line_start": 2,
        "line_end": 5,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "145": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tIntroduction\n\tMutes lookup\n\nContent: \n### Mutes lookup  \nThe mutes lookup endpoint allows you to see which accounts the authenticated user has muted. This endpoint has a rate limit of 15 requests per 15 minutes per user.\n",
        "line_start": 2402,
        "line_end": 2404,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "146": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tIntroduction\n\tManage mutes\n\nContent: \n### Manage mutes  \nThe manage mute endpoints enable you to mute or unmute a specified account on behalf of an authenticated user. For these endpoints, there are two methods available: POST and DELETE. The POST method allows you to mute an account, and the DELETE method allows you to unmute an account. There is a user rate limit of 50 requests per 15 minutes for both the POST and DELETE endpoints.  \n**Please note:**\u00a0If a user mutes from\u00a0[Twitter](https://twitter.com/), there is a limit of 200 requests per 15 minutes.  \n**Account setup**  \nTo access these endpoints, you will need:  \n* An approved\u00a0[developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info).\n* To authenticate using the keys and tokens from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is located within a\u00a0[Project](https://developer.twitter.com/en/docs/projects).  \nLearn more about getting access to the Twitter API v2 endpoints in our\u00a0[getting started guide](https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api).  \n[Quick start](https://developer.twitter.com/en/docs/twitter-api/users/mutes/quick-start)  \n[Sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)  \n[Run in Postman](https://t.co/twitter-api-postman)  \n[Try with API Explorer](https://developer.twitter.com/apitools/api?endpoint=/2/users/%7Bid%7D/muting&method=get)\n",
        "line_start": 2406,
        "line_end": 2418,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "147": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tSupporting resources\n\nContent: \n## Supporting resources  \n[Learn how to use Postman to make requests](https://developer.twitter.com/en/docs/tutorials/postman-getting-started \"Learn how to use Postman to make requests\")  \n[Troubleshoot an error](https://developer.twitter.com/en/support/twitter-api \"Troubleshoot an error\")  \n[Visit the API reference page for this endpoint](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference \"Visit the API reference page for this endpoint\")  \nMutes lookup quick start\n",
        "line_start": 35,
        "line_end": 40,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "148": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tGetting started with the mutes lookup endpoint\n\nContent: \n## Getting started with the mutes lookup endpoint  \nThis quick start guide will help you make your first request to the mutes lookup endpoint using Postman.  \nPlease visit our\u00a0[Twitter API v2 sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)\u00a0GitHub repository\u00a0if you want to see sample code in different languages.\n",
        "line_start": 2439,
        "line_end": 2442,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "149": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tGetting started with the mutes lookup endpoint\n\tPrerequisites\n\nContent: \n### Prerequisites  \nTo complete this guide, you will need to have a set of\u00a0[keys and tokens](https://developer.twitter.com/en/docs/authentication)\u00a0to authenticate your request. You can generate these keys and tokens by following these steps:  \n* [Sign up for a developer account](https://developer.twitter.com/en/apply-for-access)\u00a0and receive approval.\n* Create a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0and an associated\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0in the developer portal.\n* Navigate to your App's \u201cKeys and tokens\u201d page to generate the required credentials. Make sure to save all credentials in a secure location.\n",
        "line_start": 55,
        "line_end": 60,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "150": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tGetting started with the mutes lookup endpoint\n\tSteps to build a mutes lookup request\n\nContent: \n### Steps to build a mutes lookup request  \n#### Step one: Start with a tool or library  \nThere are several different tools, code examples, and libraries that you can use to make a request to this endpoint, but we will use the Postman tool here to simplify the process.  \nTo load the Twitter API v2 Postman collection into your environment, please click on the following button:  \n[Add Twitter API v2 to Postman](https://t.co/twitter-api-postman)  \nOnce you have the Twitter API v2 collection loaded in Postman, navigate to the \u201cMutes\u201d folder, and select \u201cMutes lookup\u201d.  \n#### Step two: Authenticate your request  \nTo properly make a request to the Twitter API, you need to verify that you have permission. To do so with this endpoint, you must authenticate your request using either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code).  \nIn this example, we are going to use OAuth 1.0a User Context.  \nYou must add your keys and tokens \u2013 specifically your API Key, API Secret Key, OAuth 1.0a user Access Token, and OAuth 1.0a user Access Token Secret \u2013 to Postman. You can do this by selecting the environment named \u201cTwitter API v2\u201d in the top-right corner of Postman and adding your keys and tokens to the \"initial value\" and \"current value\" fields (by clicking the eye icon next to the environment dropdown).  \nThese variables will automatically be pulled into the request's authorization tab if you've done this correctly.  \n#### Step three:\u00a0Specify a user  \nWith this endpoint, you must specify your user ID or the ID of an authenticated user to see who you or the authenticated user has muted.  \nIn Postman, navigate to the \"Params\" tab and enter the authenticated user ID into the \"Value\" column of the id under \u201cPath Variables\u201d (at the bottom of the section), making sure to not include any spaces before or after ID.  \nAbove the \u201cPath Variables\u201d section, you\u2019ll notice there are optional \u201cQuery Params\u201d to add. For this example, we will check the variable max\\_results and add a value of 5.  \n|     |     |     |\n| --- | --- | --- |\n| **Key** | **Value** | **Parameter Type** |\n| `id` | (your user ID) | Path |\n| max\\_results | 5   | Query |  \n#### Step four:\u00a0Identify and specify which fields you would like to retrieve  \nIf you click the \"Send\" button after step three, you will receive the default [user object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) fields in your response: id, name, and username.  \nIf you want to receive additional fields beyond id, name, and username, you will have to specify those fields in your request with the [fields](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary/introduction/fields)\u00a0and/or [expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction/expansions)\u00a0parameters.  \nFor this exercise, we will request three additional sets of fields from different objects:  \n1. The additional user.created\\_at field in the primary user objects.\n2. The associated pinned Tweets\u2019 object\u2019s default fields for the returned users: id and text.\n3. The additional\u00a0 tweet.created\\_at field in the associated Tweet objects.  \nIn Postman, navigate to the \"Params\" tab and add the following key:value pair to the \"Query Params\" table:  \n|     |     |     |\n| --- | --- | --- |\n| **Key** | **Value** | **Returned fields** |\n| user.fields | created\\_at | user.created\\_at |\n| expansions | pinned\\_tweet\\_id | tweet.id, tweet.text |\n| tweet.fields | created\\_at | includes.tweets.created\\_at |  \nYou should now see a similar URL with your own user ID instead of the example ID URL next to the \"Send\" button:  \n`https://api.twitter.com/2/users/1324848235714736129/muting?user.fields=created_at&expansions=pinned_tweet_id&tweet.fields=created_at&max_results=5`  \n#### Step five: Make your request and review your response  \nOnce you have everything set up, hit the \"Send\" button, and you will receive a similar response to the following example response:  \n`{   \"data\": [     {       \"username\": \"TwitterDev\",       \"created_at\": \"2013-12-14T04:35:55.000Z\",       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\",       \"pinned_tweet_id\": \"1430984356139470849\"     }   ],   \"includes\": {     \"tweets\": [       {         \"created_at\": \"2021-08-26T20:03:51.000Z\",         \"id\": \"1430984356139470849\",         \"text\": \"Help us build a better Twitter Developer Platform!\\n \\nTake the annual developer survey &gt;&gt;&gt; https://t.co/9yTbEKlJHH https://t.co/fYIwKPzqua\"       }     ]   },   \"meta\": {     \"result_count\": 1   } }`  \n####\nStep six: Paginate through your results  \nYou may notice that there is a meta object located at the bottom of the response. If you received a next\\_token, this signals that there is another page of results that we can retrieve. To pull the next page of results, you will pull the value of the next\\_token field and add it to the request as the value to an additional pagination\\_token\u00a0query parameter.  \n|     |     |\n| --- | --- |\n| **Key** | **Value** |\n| pagination\\_token | 1710819323648428707 |  \nIf you send the request after adding this additional parameter, the next five results will be delivered with the subsequent payload since we specified max\\_results as 5\u00a0in step three. You can continue to repeat this process until all results have been returned, but you can also use the max\\_results parameter to request up to 1000 users per request, so you don\u2019t have to paginate through results quite as much.\n",
        "line_start": 2453,
        "line_end": 2500,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "151": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tNext steps\n\nContent: \n## Next steps  \n[Customize your request using the API Reference](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference \"Customize your request using the API Reference\")  \n[Reach out to the community for help](https://twittercommunity.com/ \"Reach out to the community for help\")  \nManage mutes quick start\n",
        "line_start": 137,
        "line_end": 141,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "152": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tGetting started with the manage mutes endpoints\n\nContent: \n## Getting started with the manage mutes endpoints  \nThis quick start guide will help you make your first request to the manage mutes endpoints using\u00a0[Postman](https://developer.twitter.com/en/docs/tools-and-libraries/using-postman).  \nIf you would like to see sample code in different languages, please visit our\u00a0[Twitter API v2 sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)\u00a0GitHub repository.\n",
        "line_start": 2546,
        "line_end": 2549,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "153": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tGetting started with the manage mutes endpoints\n\tPrerequisites\n\nContent: \n### Prerequisites  \nTo complete this guide, you will need to have a set of\u00a0[keys and tokens](https://developer.twitter.com/en/docs/authentication)\u00a0to authenticate your request. You can generate these keys and tokens by following these steps:  \n* [Sign up for a developer account](https://developer.twitter.com/en/apply-for-access)\u00a0and receive approval.\n* Create a\u00a0[Project](https://developer.twitter.com/en/docs/projects)\u00a0and an associated\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0in the developer portal.\n* Navigate to your App's \u201cKeys and tokens\u201d page to generate the required credentials. Make sure to save all credentials in a secure location.\n",
        "line_start": 55,
        "line_end": 60,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "154": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tGetting started with the manage mutes endpoints\n\tSteps to build a manage mutes request\n\nContent: \n### Steps to build a manage mutes request  \n#### Step one: Start with a tool or library  \nThere are several different tools, code examples, and libraries that you can use to make a request to this endpoint, but we will use the Postman tool here to simplify the process.  \nTo load the Twitter API v2 Postman collection into your environment, please click on the following button:  \n[Add Twitter API v2 to Postman](https://t.co/twitter-api-postman)  \nOnce you have the Twitter API v2 collection loaded in Postman, navigate to the \u201cMutes\u201d folder, and select \u201cMute a user\u2019s ID\u201d.  \n#### Step two: Authenticate your request  \nTo properly make a request to the Twitter API, you need to verify that you have permission. To do so with this endpoint, you must authenticate your request using either\u00a0[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0or\u00a0[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code).  \nIn this example, we are going to use OAuth 1.0a User Context.  \nYou must add your keys and tokens \u2013 specifically your API Key, API Secret Key, OAuth 1.0a user Access Token, and OAuth 1.0a user Access Token Secret \u2013 to Postman. You can do this by selecting the environment named \u201cTwitter API v2\u201d in the top-right corner of Postman and adding your keys and tokens to the \"initial value\" and \"current value\" fields (by clicking the eye icon next to the environment dropdown).  \nThese variables will automatically be pulled into the request's authorization tab if you've done this correctly.  \n#### Step three: Specify who is going to mute whom  \nManage mutes endpoints require two IDs: one for the user (the user who wishes to mute or unmute another user) and the target user (the user that will be muted or unmuted). The user\u2019s ID must correspond to the authenticating user\u2019s ID, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request. In this case, you can specify the ID belonging to your own user. You can find your ID in two ways:  \n1. Using the [user lookup](https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference) by username endpoint, you can pass a username and receive the id field.\n2. Looking at your Access Token, you will find that the numeric part is your user ID.  \nThe target ID can be any valid user ID. In Postman, navigate to the \"Params\" tab, and enter your ID into the \"Value\" column of the\u00a0`id` path variable. Navigate to the \u201cBody\u201d tab and ID of the user you wish to mute as the value for the target\\_user\\_id parameter. Be sure not to include any spaces before or after any ID.  \n|     |     |\n| --- | --- |\n| **Key** | **Value** |\n| `id` | authenticated user ID |\n| target\\_user\\_id | the user ID you wish to mute |  \n#### Step four: Make your request and review your response  \nOnce you have everything set up, hit the \"Send\" button, and you will receive a similar response to the following example response:  \n`{ \"data\": { \"muting\": true } }`  \nIf you receive a \"muting\": true, then the id is successfully muting the target\\_user\\_id  \nTo unmute the same user you can use the request entitled \u201cUnmute a user ID\u201d, which is also found in the \u201cMutes\u201d folder of the Twitter API v2 collection loaded in Postman. The source\\_user\\_id should be your user ID and target\\_user\\_id should be the user ID to unmute. You will not have to add this as a JSON body so you will want to make sure that you add in the requisite query params for source\\_user\\_id and target\\_user\\_id.  \nOn a successful unmute, you will receive a similar response to the following example:  \n`{ \"data\": { \"muting\": false } }`\n",
        "line_start": 2560,
        "line_end": 2588,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "155": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tNext steps\n\nContent: \n## Next steps  \n[Customize your request using the API Reference](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference \"Customize your request using the API Reference\")  \n[Reach out to the community for help](https://twittercommunity.com/ \"Reach out to the community for help\")  \nIntegrate\n",
        "line_start": 137,
        "line_end": 141,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "156": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tIntegration guide\n\nContent: \n## Integration guide  \nThis page contains information on several tools and key concepts that you should be aware of as you integrate the mutes endpoints into your system. We\u2019ve broken the page into a couple of different sections:  \n* [Helpful tools](#helpful)\n* Key Concepts\n* [Authentication](#authentication)\n* [Developer portal, Projects, and Apps](#portal)\n* [Rate limits](#limits)\n* [Fields and expansions](#fields)\n* [Pagination](#pagination)\n",
        "line_start": 221,
        "line_end": 230,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "157": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tIntegration guide\n\tHelpful tools\n\nContent: \n### Helpful tools  \nBefore we dive into some key concepts that will help you integrate this endpoint, we recommend that you become familiar with:  \n#### Postman  \nPostman is a great tool that you can use to test out an endpoint. Each Postman request includes every path and body parameter to help you quickly understand what is available to you. To learn more about our Postman collections, please visit our [\"Using Postman\"](https://developer.twitter.com/en/docs/tools-and-libraries/using-postman) page.  \n#### Code samples  \nInterested in getting set up with this endpoint with some code in your preferred coding language? We\u2019ve got a handful of different code samples available that you can use as a starting point on our [Github page](https://github.com/twitterdev/Twitter-API-v2-sample-code).  \n#### Third-party libraries  \nTake advantage of one of our communities\u2019 [third-party libraries](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries) to help you get started. You can find a library that works with the v2 endpoints by looking for the proper version tag.\n",
        "line_start": 233,
        "line_end": 241,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "158": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tIntegration guide\n\tKey concepts\n\nContent: \n### Key concepts  \n#### Authentication  \nAll Twitter API v2 endpoints require you to authenticate your requests with a set of credentials, also known as keys and tokens.\u00a0You can use either OAuth 1.0a User Context, or OAuth 2.0 Authorization Code with PKCE to authenticate your requests to these endpoints.  \n[OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0requires you to utilize your\u00a0API Keys, user Access Tokens, and a handful of other parameters to\u00a0[create an authorization header](https://developer-staging.twitter.com/en/docs/authentication/oauth-1-0a/authorizing-a-request), which you will then pass with your request. The Access Tokens must be associated with the user that you are making the request on behalf of. If you would like to generate a set of Access Tokens for another user, they must authorize your App using the\u00a0[3-legged OAuth flow](https://developer-staging.twitter.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens).  \nPlease note that OAuth 1.0a can be difficult to use. If you are not familiar with this authentication method, we recommend that you use a\u00a0[library](https://developer.twitter.com/content/en/docs/twitter-api/tools-and-libraries), use\u00a0a tool like Postman, or use OAuth 2.0 to authenticate your requests.  \n[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code)\u00a0allows for greater control over an application\u2019s scope, and authorization flows across multiple devices. OAuth 2.0 allows you to pick specific fine-grained scopes which give you specific permissions on behalf of a user.  \nTo enable OAuth 2.0 in your App, you must enable it in your\u2019s App\u2019s authentication settings found in the App settings section of the developer portal.  \n#### Developer portal, Projects, and developer Apps  \nTo retrieve a set of authentication credentials that will work with the Twitter API v2 endpoints, you must [sign up for a\u00a0developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info), set up a [Project](https://developer.twitter.com/en/docs/projects) within that account, and created a [developer App](https://developer.twitter.com/en/docs/apps) within that Project. You can then find your keys and tokens within your developer App.  \n#### Rate limits  \nEvery day, many thousands of developers make requests to the Twitter API. To help manage the sheer volume of these requests, [rate limits](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/rate-limits) are placed on each endpoint that limits the number of requests you can make on behalf of your app or on behalf of an authenticated user.  \nThese endpoints are rate limited at the user level, meaning that the authenticated user that you are making the request on behalf of can only call the endpoint a certain number of times across any developer App.  \nThere is a user rate limit of 50 requests per 15 minutes per endpoint with both POST and DELETE methods. However, with the GET method, the rate limit is only 15 requests per 15 minutes.  \n#### Fields and expansions  \nThe Twitter API v2 GET endpoint allows users to select exactly which data they want to return from the API using a set of tools called fields and expansions. The expansions parameter allows you to expand objects referenced in the payload. For example, this endpoint allows you to pull the following [expansions](https://developer.twitter.com/en/docs/twitter-api/expansions):  \n* pinned\\_tweet\\_id  \nThe **fields** parameter allows you to select exactly which [fields](https://developer.twitter.com/en/docs/twitter-api/fields) within the different data objects you would like to receive. This endpoint delivers User objects primarily. By default, the User object returns the\u00a0**id**\u00a0,\u00a0**name**\u00a0 and **username**\u00a0fields. To receive additional fields such as **user.created\\_at** or **user.entities**, you will have to specifically request those using a **fields** parameter.  \nWe\u2019ve added a guide on using\u00a0[fields and expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/using-fields-and-expansions) together to our [Twitter API v2 data dictionary](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction).  \n#### Pagination  \nMutes lookup can return a lot of data. To ensure we are returning consistent, high-performing results at any given time, we use pagination. Pagination is a feature in Twitter API v2 endpoints that return more results than can be returned in a single response. When that happens, the data is returned in a series of 'pages'. Learn more about how to [paginate through results.](https://developer.twitter.com/en/docs/twitter-api/users/mutes/content/developer-twitter/en/docs/twitter-api/pagination)  \n**Please note:** If a user mutes from\u00a0[Twitter](https://twitter.com/), there is a limit of 200 requests per 15 minutes.\n",
        "line_start": 249,
        "line_end": 270,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "159": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tNext steps\n\nContent: \n## Next steps  \n[Visit the API reference page for these endpoint](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference \"Visit the API reference page for these endpoint\")  \nMigrate\n",
        "line_start": 137,
        "line_end": 140,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "160": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tComparing Twitter API\u2019s mutes endpoints\n\tMutes lookup\n\nContent: \n## Comparing Twitter API\u2019s mutes endpoints  \n### Mutes lookup  \nThe v2 mutes lookup endpoint will replace the standard [v1.1 GET mutes/users/ids](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids) and [GET mutes/users/list](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list) endpoints.  \nThe following tables compare the standard v1.1 and Twitter API v2 mute endpoints:  \n| Description | Standard v1.1 | Twitter API v2 |\n| --- | --- | --- |\n| HTTP methods supported | ******GET****** | ******GET****** |\n| Host domain | ******https://api.twitter.com****** | ******https://api.twitter.com****** |\n| Endpoint path | ******/1.1/mutes/users/ids.json******<br><br>/1.1/mutes/users/list.json | ******/2/users/:id/muting****** |\n| [Authentication](https://developer.twitter.com/content/developer-twitter/en/docs/authentication) | OAuth 1.0a User Context | OAuth 1.0a User Context<br><br>OAuth 2.0 Authorization Code with PKCE |\n| Default request [rate limits](https://developer.twitter.com/content/developer-twitter/en/docs/rate-limits) | 15 requests per 15 min (per user) | 15 requests per 15 min (per user) |\n| Data formats | Standard v1.1 format | [Twitter API v2 format](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary) (determined by fields and expansions request parameters, not backward-compatible with v1.1 formats)<br><br>To learn more about how to migrate from the Standard v1.1 format to the Twitter API v2 format, please visit our [data formats migration guide](https://developer.twitter.com/en/docs/twitter-api/migrate/data-formats). |\n| Requires use of credentials from a [developer App](https://developer.twitter.com/en/docs/apps) that is associated with a [Project](https://developer.twitter.com/en/docs/projects) |     | \u2714\ufe0f  |\n",
        "line_start": 2703,
        "line_end": 2716,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "161": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tComparing Twitter API\u2019s mutes endpoints\n\tManage mutes\n\nContent: \n### Manage mutes  \nThe v2 manage mutes endpoints will replace the standard v1.1 [POST mutes/users/create](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-create)\u00a0and [POST mutes/users/destroy](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-destroy)\u00a0endpoints.  \nThe following tables compare the standard v1.1 and Twitter API v2 mute endpoints:  \n#### Mute a user  \n| Description | Standard v1.1 | Twitter API v2 |\n| --- | --- | --- |\n| HTTP methods supported | POST | POST |\n| Host domain | https://api.twitter.com | https://api.twitter.com |\n| Endpoint path | /1.1/mutes/users/create.json | /2/users/:id/muting |\n| [Authentication](https://developer.twitter.com/content/developer-twitter/en/docs/authentication) | OAuth 1.0a User Context | OAuth 1.0a User Context<br><br>OAuth 2.0 Authorization Code with PKCE |\n| Default request [rate limits](https://developer.twitter.com/content/developer-twitter/en/docs/rate-limits) | 50 requests per 15 min | 50 requests per 15 min |\n| Requires use of credentials from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is associated with a\u00a0[Project](https://developer.twitter.com/en/docs/projects) |     | \u2714\ufe0f  |  \n#### Unmute a user  \nThe following tables compare the standard v1.1 and Twitter API v2 unmute endpoints:  \n| Description | Standard v1.1 | Twitter API v2 |\n| --- | --- | --- |\n| HTTP methods supported | POST | DELETE |\n| Host domain | https://api.twitter.com | https://api.twitter.com |\n| Endpoint path | /1.1/mutes/users/destroy.json | /2/users/:source\\_user\\_id/muting/:target\\_user\\_id |\n| [Authentication](https://developer.twitter.com/content/developer-twitter/en/docs/authentication) | OAuth 1.0a User Context | OAuth 1.0a User Context<br><br>OAuth 2.0 Authorization Code with PKCE |\n| Default request [rate limits](https://developer.twitter.com/content/developer-twitter/en/docs/rate-limits) | 50 requests per 15 min | 50 requests per 15 min |\n| Requires use of credentials from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is associated with a\u00a0[Project](https://developer.twitter.com/en/docs/projects) |     | \u2714\ufe0f  |\n",
        "line_start": 2406,
        "line_end": 2428,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "162": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tOther migration resources\n\nContent: \n## Other migration resources  \n[Manage mutes: Standard v1.1 to Twitter API v2](https://developer.twitter.com/en/docs/twitter-api/users/mutes/migrate/manage-mutes--standard-v1-1-compared-to-twitter-api-v2 \"Manage mutes: Standard v1.1 to Twitter API v2\")  \n[Twitter API migration hub](https://developer.twitter.com/en/docs/twitter-api/migrate \"Twitter API migration hub\")  \nMutes lookup: Standard v1.1 compared to Twitter API v2\n",
        "line_start": 341,
        "line_end": 345,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "163": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tMutes lookup: Standard v1.1 compared to Twitter API v2\n\nContent: \n## Mutes lookup: Standard v1.1 compared to Twitter API v2  \nIf you have been working with the standard v1.1 [GET mutes/users/ids](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids)\u00a0and [GET mutes/users/list](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list)\u00a0endpoints, the goal of this guide is to help you understand the similarities and differences between the standard v1.1 and Twitter API v2 mutes lookup endpoints.  \n* **Similarities**\n* Authentication\n* **Differences**\n* Endpoint URLs  \n* Users per request limits\n* App and Project requirements\n* Response data formats\n* Request parameters\n",
        "line_start": 2760,
        "line_end": 2770,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "164": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tMutes lookup: Standard v1.1 compared to Twitter API v2\n\tSimilarities\n\nContent: \n### Similarities  \n#### **Authentication**  \nBoth the standard v1.1 and Twitter API v2 mutes lookup endpoints use [OAuth 1.0a User Context](https://developer.twitter.com/content/developer-twitter/en/docs/authentication/oauth-1-0a). Therefore, if you were previously using one of the standard v1.1 mutes lookup endpoints, you can continue using the same authentication method if you migrate to the Twitter API v2 version.\n",
        "line_start": 364,
        "line_end": 367,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "165": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tMutes lookup: Standard v1.1 compared to Twitter API v2\n\tDifferences\n\nContent: \n### Differences  \n#### Endpoint URLs  \n* Standard v1.1 endpoints:\n* GET https://api.twitter.com/1.1/mutes/users/ids.json\n(list of user IDs who the specified user muted)\n* GET https://api.twitter.com/1.1/mutes/users/lists.json\n(list of users who are muted by the specified user)\n* Twitter API v2 endpoint:\n* GET https://api.twitter.com/2/users/:id/muting\n(list of users who are muted by the specified user ID)  \n#### Users per request limits  \nThe standard v1.1 endpoints allow you to return up to 5000 users per request. The new v2 endpoints allow you to return up to 1000 users per request. To return a full 1000 users, you will need to pass max\\_results=1000 as a query parameter; you can then pass the next\\_token returned in the response payload to the pagination\\_token query parameter in your next request.  \n#### App and Project requirements  \nThe Twitter API v2 endpoints require that you use credentials from a [developer App](https://developer.twitter.com/content/developer-twitter/en/docs/apps) that is associated with a [Project](https://developer.twitter.com/content/developer-twitter/en/docs/projects) when authenticating your requests. All Twitter API v1.1 endpoints can use credentials from standalone Apps or Apps associated with a project.  \n#### Response data format  \nOne of the biggest differences between standard v1.1 and Twitter API v2 endpoint versions is how you select which fields return in your payload.  \nFor the standard endpoints, you receive many of the response fields by default and then have the option to\u00a0use parameters to identify which fields or sets of fields should return in the payload.  \nThe Twitter API v2 version only delivers the user\u00a0id, name, and username\u00a0fields by default. To request any additional fields or objects, you will need to use the\u00a0[fields](https://developer.twitter.com/en/docs/twitter-api/fields/content/developer-twitter/en/docs/twitter-api/fields)\u00a0and\u00a0[expansions](https://developer.twitter.com/en/docs/twitter-api/fields/content/developer-twitter/en/docs/twitter-api/expansions)\u00a0parameters. Any user fields that you request from this endpoint will return in the primary user object. Any expanded Tweet object and fields will return an includes object within your response. You can then match any expanded objects back to the user object by matching the IDs located in both the user and the expanded Tweet object.  \nWe encourage you to read more about these new parameters in their respective guides, or by reading our guide on [how to use fields and expansions](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/using-fields-and-expansions).  \nWe have also put together a [data format migration guide](https://developer.twitter.com/en/docs/twitter-api/migrate/data-formats/standard-v1-1-to-v2) which can help you map standard v1.1 fields to the newer v2 fields. This guide will also provide you the specific expansion and field parameter that you will need to pass with your v2 request to return specific fields.  \nIn addition to the changes in how you request certain fields,\u00a0Twitter API v2 is also introducing new JSON designs for the objects returned by the APIs, including\u00a0[Tweet](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet)\u00a0and\u00a0[user](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user)\u00a0objects.  \n* At the JSON root level, the standard endpoints return Tweet objects in a statuses array, while Twitter API v2 returns a data array.\n* Instead of referring to Retweeted and Quoted \"statuses\", Twitter API v2 JSON refers to Retweeted and Quoted Tweets. Many legacy and deprecated fields, such as\u00a0contributors\u00a0and\u00a0user.translator\\_type\u00a0are being removed.\n* Instead of using both\u00a0favorites\u00a0(in Tweet object) and\u00a0favourites\u00a0(in user object), Twitter API v2 uses the term\u00a0like.\n* Twitter is adopting the convention that JSON values with no value (for example,\u00a0null) are not written to the payload. Tweet and user attributes are only included if they have a non-null values.  \nWe also introduced a new set of fields to the\u00a0[Tweet object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet)\u00a0including the following:  \n* A\u00a0[conversation\\_id](https://developer.twitter.com/en/docs/twitter-api/conversation-id) field\n* Two new\u00a0[annotations](https://developer.twitter.com/en/docs/twitter-api/annotations)\u00a0fields, including\u00a0context\u00a0and\u00a0entities\n* Several new\u00a0[metrics](https://developer.twitter.com/en/docs/twitter-api/metrics)\u00a0fields\n* A new reply\\_setting field, which shows you who can reply to a given Tweet  \n#### Request parameters  \nThe following standard v1.1 request parameters have equivalents in Twitter API v2:  \n| **Standard** | **Twitter API v2** |\n| --- | --- |\n| stringify\\_ids | No equivalent |\n| cursor | pagination\\_token |\n| skip\\_status | No equivalent |  \nThere are also a set of standard v1.1 Mutes lookup request parameters **not**\u00a0supported in Twitter API v2:  \n| Standard | Comment |\n| --- | --- |\n| include\\_entities | This parameter is used to remove the entities node from the Tweet payload. It has been replaced with additive fields and expansions functionality. |\n",
        "line_start": 377,
        "line_end": 418,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "166": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tNext steps\n\nContent: \n## Next steps  \n[Review the mutes lookup API references](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference \"Review the mutes lookup API references\")  \nManage mutes: Standard v1.1 compared to Twitter API v2\n",
        "line_start": 137,
        "line_end": 140,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "167": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tManage mutes: Standard v1.1 compared to Twitter API v2\n\nContent: \n## Manage mutes: Standard v1.1 compared to Twitter API v2  \nIf you have been working with the standard v1.1 [POST mutes/users/create](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-create) and [POST mutes/users/destroy](https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-destroy) endpoints, the goal of this guide is to help you understand the similarities and differences between the standard v1.1 and Twitter API v2 manage mutes endpoints.  \n* **Similarities**\n* OAuth 1.0a User Context\n* **Differences**\n* Endpoint URLs\n* App and Project requirements\n* HTTP methods\n* Request parameters\n",
        "line_start": 2854,
        "line_end": 2863,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "168": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tManage mutes: Standard v1.1 compared to Twitter API v2\n\tSimilarities\n\nContent: \n### Similarities  \n#### OAuth 1.0a User Context authentication method  \nBoth the endpoint versions support [OAuth 1.0a User Context](https://developer.twitter.com/content/developer-twitter/en/docs/authentication/oauth-1-0a). Therefore, if you were previously using one of the standard v1.1 manage mutes endpoints, you can continue using the same authentication method if you migrate to the Twitter API v2 version.\n",
        "line_start": 364,
        "line_end": 367,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "169": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tManage mutes: Standard v1.1 compared to Twitter API v2\n\tDifferences\n\nContent: \n### Differences  \n#### Endpoint URLs  \n* Standard v1.1 endpoints:\n* POST https://api.twitter.com/1.1/mutes/users/create.json\n(mute a user)\n* POST https://api.twitter.com/1.1/mutes/users/destroy.json\n(unmute a user)\n* Twitter API v2 endpoint:\n* POST https://api.twitter.com/2/users/:id/muting\n(mute a user)\n* DELETE https://api.twitter.com/2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n(unmute a user)  \n#### App and Project requirements  \nThe Twitter API v2 endpoints require that you use credentials from a [developer App](https://developer.twitter.com/en/docs/apps) that is associated with a [Project](https://developer.twitter.com/en/docs/projects) when authenticating your requests. All Twitter API v1.1 endpoints can use credentials from standalone Apps or Apps associated with a project.  \n#### Request parameters  \nThe following standard v1.1 request parameters have equivalents in Twitter API v2:  \n| Standard v1.1 | Twitter API v2 |\n| --- | --- |\n| user\\_id | target\\_user\\_id |\n| screen\\_name | No equivalent |  \nPlease note that the Standard v1.1 parameters are passed as query parameters, whereas the Twitter API v2 parameters are passed as body parameters (for the POST endpoint) or path parameters (for the DELETE endpoint).  \nAlso, an\u00a0id\u00a0of the user muting a target user is not required when using the standard v1.1 endpoints since the access tokens passed\u00a0with [OAuth 1.0a User Context](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) inferred which user was initiating the mute/unmute.\n",
        "line_start": 377,
        "line_end": 399,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "170": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tNext steps\n\nContent: \n## Next steps  \n[Review the manage mutes API references](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference \"Review the manage mutes API references\")  \nAPI reference\n",
        "line_start": 137,
        "line_end": 140,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "171": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tAPI reference index\n\nContent: \n## API reference index  \nFor the complete API reference, select an endpoint from the list.\n",
        "line_start": 449,
        "line_end": 451,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "172": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tAPI reference index\n\tMutes lookup\n\nContent: \n### Mutes lookup  \n|     |     |\n| --- | --- |\n| **Returns a list of users who are muted by the specified user ID** | `[GET /2/users/:id/muting](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting)` |\n",
        "line_start": 2402,
        "line_end": 2406,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "173": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/blocking\n\tAPI reference index\n\tManage mutes\n\nContent: \n### Manage mutes  \n|     |     |\n| --- | --- |\n| **Allows a user ID to mute another user** | `[POST /2/users/:id/muting](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting)` |\n| **Allows a user ID to unmute another user** | `[DELETE /2/users/:source_user_id/muting/:target_user_id](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting)` |  \nGET /2/users/:id/muting\n",
        "line_start": 2406,
        "line_end": 2412,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "174": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\nContent: \n# GET /2/users/:id/muting  \nReturns a list of users who are muted by the specified user ID.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdMuting&params=%28%27query%21%28%29%7Ebody%21%27%27%7Epath%21%28%29%29_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D%2Fmuting&method=get)\n",
        "line_start": 2932,
        "line_end": 2937,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "175": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:id/muting`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "176": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | User rate limit (User context): 15 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "177": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`mute.read` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "178": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Required | string | The user ID whose muted users you would like to retrieve. The user\u2019s ID must correspond to the user ID of the authenticating user, meaning that you must pass the [Access Tokens](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token) associated with the user ID when authenticating your request. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "179": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `max_results`  <br>\u00a0Optional | integer | The maximum number of results to be returned per page. This can be a number between 1 and 1000. By default, each page will return 100 results. |\n| `pagination_token`  <br>\u00a0Optional | string | Used to request the next page of results if all results weren't returned with the latest request, or to go back to the previous page of results. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 509,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "180": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript (Default fields)](#tab0)\n* [TypeScript (Optional fields)](#tab1)\n* [Java (Default fields)](#tab2)\n* [Java (Optional fields)](#tab3)  \nTypeScript (Default fields)  \nTypeScript (Optional fields)  \nJava (Default fields)  \nJava (Optional fields)  \n`(async () => {   try {     const getMutedUsers = await twitterClient.users.usersIdMuting(       //The ID of the user for whom to return results       \"2244994945\"     );     console.dir(getMutedUsers, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`(async () => {   try {     const getUsersMuted = await twitterClient.users.usersIdMuting(       //The ID of the user for whom to return results       \"2244994945\",       {         //A comma separated list of User fields to display         \"user.fields\": [\"created_at\"],                  //A comma separated list of Tweet fields to display.         \"tweet.fields\": [\"created_at\"],                  //A comma separated list of fields to expand         expansions: [\"pinned_tweet_id\"],          //The maximum number of results         max_results: 10,       }     );     console.dir(getUsersMuted, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";  try {     GenericMultipleUsersLookupResponse result = apiInstance.users().usersIdMuting(id, null, null, null, null, null);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdMuting\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`  \n`// Set the params values  // String | The ID of the user for whom to return results String id = \"2244994945\";  // Integer | The maximum number of results to be returned. Integer maxResults = 10;  // Set<String> | A comma separated list of fields to expand. Set<String> expansions = new HashSet<>(Arrays.asList(\"pinned_tweet_id\"));  // Set<String> | A comma separated list of Tweet fields to display. Set<String> tweetFields = new HashSet<>(Arrays.asList(\"created_at\"));   // Set<String> | A comma separated list of User fields to display. Set<String> userFields = new HashSet<>(Arrays.asList(\"created_at\"));  try {     GenericMultipleUsersLookupResponse result = apiInstance.users().usersIdMuting(id, maxResults, null, userFields, expansions, tweetFields);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdMuting\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 525,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "181": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tExample responses\n\nContent: \n### Example responses  \n* [Default fields](#tab0)\n* [Optional fields](#tab1)  \nDefault fields  \nOptional fields  \n`{   \"data\": [     {       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\",       \"username\": \"TwitterDev\"     }   ],   \"meta\": {     \"result_count\": 1   } }`  \n`{   \"data\": [     {       \"username\": \"TwitterDev\",       \"created_at\": \"2013-12-14T04:35:55.000Z\",       \"id\": \"2244994945\",       \"name\": \"Twitter Dev\",       \"pinned_tweet_id\": \"1430984356139470849\"     }   ],   \"includes\": {     \"tweets\": [       {         \"created_at\": \"2021-08-26T20:03:51.000Z\",         \"id\": \"1430984356139470849\",         \"text\": \"Help us build a better Twitter Developer Platform!n nTake the annual developer survey &gt;&gt;&gt; https://t.co/9yTbEKlJHH https://t.co/fYIwKPzqua\"       }     ]   },   \"meta\": {     \"result_count\": 1   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "182": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/:id/muting\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |\n| `meta`  <br>\u00a0Default | object | This object contains information about the number of users returned in the current request, and pagination details. |\n| `meta.result_count`  <br>\u00a0Default | integer | The number of users returned in this request. Note that this number may be lower than what was specified in the `max_results` query parameter. |\n| `meta.previous_token` | string | Pagination token for the previous page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To go back to the previous page, passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you are on the first page of results. |\n| `meta.next_token` | string | Pagination token for the next page of results. This value is returned when there are multiple pages of results, as the current request may only return a subset of results. To retrieve the full list, keep passing the value from this field in the `pagination_token` query parameter. When this field is not returned in the response, it means you've reached the last page of results, and that there are no further pages. |  \nPOST /2/users/:id/muting\n",
        "line_start": 554,
        "line_end": 612,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "183": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\nContent: \n# POST /2/users/:id/muting  \nAllows an authenticated user ID to mute the target user.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdMute&params=%28%27query%21%28%29%7Ebody%21%27%27%7Epath%21%28%29%29_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bid%7D%2Fmuting&method=post)\n",
        "line_start": 3086,
        "line_end": 3091,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "184": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:id/muting`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "185": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint.<br><br>[OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | User rate limit (User context): 50 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "186": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`mute.write` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "187": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Required | string | The user ID who you would like to initiate the mute on behalf of. It must match your own user ID or that of an authenticating user, meaning that you must pass the [Access Tokens](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token) associated with the user ID when authenticating your request. |\n",
        "line_start": 492,
        "line_end": 496,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "188": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tJSON body parameters\n\nContent: \n### JSON body parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `target_user_id`  <br>\u00a0Required | string | The user ID of the user that you would like the `id` to mute. The body should contain a string of the user ID inside of a JSON object. |\n",
        "line_start": 1493,
        "line_end": 1497,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "189": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript](#tab0)\n* [Java](#tab1)  \nTypeScript  \nJava  \n`(async () => {   try {     const muteUser = await twitterClient.users.usersIdMute(       //The ID of the user that is requesting to mute the target user       \"6253282\",       {         //The ID of the user that the source user is requesting to mute         target_user_id: \"2244994945\",       }     );     console.dir(muteUser, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  UsersIdMuteRequest usersIdMuteRequest = new UsersIdMuteRequest();  //The ID of the user that the source user is requesting to mute usersIdMuteRequest.targetUserId(\"2244994945\");  // String | The ID of the user that is requesting to mute the target user String id = \"6253282\";  try {     UsersMutingMutationResponse result = apiInstance.users().usersIdMute(usersIdMuteRequest, id);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdMute\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 519,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "190": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tExample responses\n\nContent: \n### Example responses  \n* [Successful response](#tab0)  \nSuccessful response  \n`{   \"data\": {     \"muting\": true   } }`\n",
        "line_start": 539,
        "line_end": 543,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "191": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tPOST /2/users/:id/muting\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `muting` | boolean | Indicates whether the user is muting the specified user as a result of this request. |  \nDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n",
        "line_start": 554,
        "line_end": 559,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "192": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\nContent: \n# DELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id  \nAllows an authenticated user ID to unmute the target user.  \nThe request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)  \n[Try a live request \u276f](https://oauth-playground.glitch.me/?id=usersIdUnmute&params=%28%27query%21%28%29%7Ebody%21%27%27%7Epath%21%28%29%29_)  \n[Build request with API Explorer \u276f](https://developer.twitter.com/apitools/api?endpoint=%2F2%2Fusers%2F%7Bsource_user_id%7D%2Fmuting%2F%7Btarget_user_id%7D&method=delete)\n",
        "line_start": 3165,
        "line_end": 3171,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "193": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/:source_user_id/muting/:target_user_id`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "194": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/authentication/oauth-2-0/authorization-code \"This method allows an authorized app to act on behalf of the user, as the user. It is typically used to access or post public information for a specific user, and it us useful when your app needs to be aware of the relationship between a user and what this endpoint returns. Click to learn how to authenticate with OAuth 2.0 Authorization Code with PKCE.\")<br><br>[OAuth 1.0a](https://developer.twitter.com/en/docs/authentication/oauth-1-0a) is also available for this endpoint. |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | User rate limit (User context): 50 requests per 15-minute window per each authenticated user |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "195": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tOAuth 2.0 scopes required by this endpoint\n\nContent: \n### OAuth 2.0 scopes required by this endpoint  \n|     |\n| --- |\n| `tweet.read`<br><br>`users.read`<br><br>`mute.write` |\n| [Learn more about OAuth 2.0 Authorization Code with PKCE](https://developer.twitter.com/en/docs/twitter-api/oauth2) |\n",
        "line_start": 485,
        "line_end": 490,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "196": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tPath parameters\n\nContent: \n### Path parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `source_user_id`  <br>\u00a0Required | string | The user ID who you would like to initiate an unmute on behalf of. The user\u2019s ID must correspond to the user ID of the authenticating user, meaning that you must pass the [Access Tokens](https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token) associated with the user ID when authenticating your request. |\n| `target_user_id`  <br>\u00a0Required | string | The user ID of the user that you would like the `source_user_id` to unmute. |\n",
        "line_start": 492,
        "line_end": 497,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "197": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tExample code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)\n\nContent: \n### Example code with offical [SDKs](https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries/sdks/overview)  \n* [TypeScript](#tab0)\n* [Java](#tab1)  \nTypeScript  \nJava  \n`(async () => {   try {     const unmuteUser = await twitterClient.users.usersIdUnmute(       //The ID of the user that is requesting to unmute the target user       \"2244994945\",        //The ID of the user that the source user is requesting to unmute       \"6253282\"     );     console.dir(unmuteUser, {       depth: null,     });   } catch (error) {     console.log(error);   } })();`  \n`// Set the params values  // String | The ID of the user that is requesting to unmute the target user String sourceUserId = \"2244994945\";  // String | The ID of the user that the source user is requesting to unmute String targetUserId = \"6253282\";  try {     UsersMutingMutationResponse result = apiInstance.users().usersIdUnmute(sourceUserId, targetUserId);     System.out.println(result); } catch (ApiException e) {     System.err.println(\"Exception when calling UsersApi#usersIdUnmute\");     System.err.println(\"Status code: \" + e.getCode());     System.err.println(\"Reason: \" + e.getResponseBody());     System.err.println(\"Response headers: \" + e.getResponseHeaders());     e.printStackTrace(); }`\n",
        "line_start": 512,
        "line_end": 519,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "198": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tExample responses\n\nContent: \n### Example responses  \n* [Successful response](#tab0)  \nSuccessful response  \n`{   \"data\": {     \"muting\": false   } }`\n",
        "line_start": 539,
        "line_end": 543,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "199": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `muting` | boolean | Indicates whether the user is muting the specified user as a result of this request. The returned value is `false` for a successful unmute request. |  \nIntroduction\n",
        "line_start": 554,
        "line_end": 559,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "200": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tIntroduction\n\nContent: \n## Introduction  \nAvailable to developers with Pro access and higher  \nThe Users Search endpoint\u00a0provides a simple, relevance-based search interface to public user accounts on X. Try querying by topical interest, full name, company name, location, or other criteria.  \nThis endpoint currently supports\u00a0[User Auth](https://developer.twitter.com/en/docs/authentication/oauth-1-0a)\u00a0. By default, you get 100 Users per request and you can specify up to 1000 Users per request.\u00a0It has a limit of 10,000 requests per 24 hours (in addition to the 300 requests per 15 minutes)  \n**Account setup**  \nTo access these endpoints, you will need:  \n* An approved\u00a0[developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info).\n* To authenticate using the keys and tokens from a\u00a0[developer App](https://developer.twitter.com/en/docs/apps)\u00a0that is located within a\u00a0[Project](https://developer.twitter.com/en/docs/projects).  \nLearn more about getting access to the Twitter API v2 endpoints in our\u00a0[getting started guide](https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api).  \n[Quick start](https://developer.twitter.com/en/docs/twitter-api/users/search/quick-start)  \n[Sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)  \n[Run in Postman](https://t.co/twitter-api-postman)\n",
        "line_start": 2,
        "line_end": 14,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "201": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tSupporting resources\n\nContent: \n## Supporting resources  \n[Learn how to use Postman to make requests](https://developer.twitter.com/en/docs/tutorials/postman-getting-started \"Learn how to use Postman to make requests\")  \n[Troubleshoot an error](https://developer.twitter.com/en/support/twitter-api \"Troubleshoot an error\")  \n[Visit the API reference page for this endpoint](https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference \"Visit the API reference page for this endpoint\")  \nAPI reference\n",
        "line_start": 35,
        "line_end": 40,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "202": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tDELETE /2/users/:source\\_user\\_id/muting/:target\\_user\\_id\n\tAPI reference index\n\nContent: \n## API reference index  \n|     |     |\n| --- | --- |\n| **Search Users** | `[GET /2/users/search](https://developer.twitter.com/en/docs/twitter-api/users/search/api-reference/get-users-search)` |  \nGET /2/users/search\n",
        "line_start": 449,
        "line_end": 454,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "203": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\nContent: \n# GET /2/users/search  \nThe users endpoint returns Users that match a search query. This endpoint has a limit of 10,000 requests per 24 hours (in addition to the 300 requests per 15 minutes.  \n[Run in Postman \u276f](https://t.co/twitter-api-postman)\n",
        "line_start": 3279,
        "line_end": 3282,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "204": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tEndpoint URL\n\nContent: \n### Endpoint URL  \n`https://api.twitter.com/2/users/search`\n",
        "line_start": 473,
        "line_end": 475,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "205": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tAuthentication and rate limits\n\nContent: \n### Authentication and rate limits  \n|     |     |\n| --- | --- |\n| Authentication methods  <br>supported by this endpoint | [OAuth 2.0 App-only](https://developer.twitter.com/en/docs/authentication/oauth-2-0/application-only \"Use this method to obtain information in the context of an unauthenticated public user. This method is for developers that just need read-only access to public information. Click to learn how to obtain an OAuth 2.0 App Access Token.\") |\n| [Rate limit](https://developer.twitter.com/en/docs/rate-limits) | App rate limit (Application-only): 300 requests per 15-minute window shared among all users of your app |\n",
        "line_start": 478,
        "line_end": 483,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "206": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tQuery parameters\n\nContent: \n### Query parameters  \n| Name | Type | Description |\n| --- | --- | --- |\n| `query`  <br>\u00a0Required | string | One query for matching Tweets. You can learn how to build this query by reading our [build a query guide](https://developer.twitter.com/en/docs/twitter-api/tweets/search/integrate/build-a-query).  <br>  <br>If you have Essential or Elevated access, you can use the Basic operators when building your query and can make queries up to 512 characters long. If you have been approved for Academic Research access, you can use all available operators and can make queries up to 1,024 characters long.  <br>  <br>Learn more about our access levels on the about Twitter API page. |\n| `expansions`  <br>\u00a0Optional | enum (`pinned_tweet_id`) | [Expansions](https://developer.twitter.com/en/docs/twitter-api/expansions) enable you to request additional data objects that relate to the originally returned users. The ID that represents the expanded data object will be included directly in the user data object, but the expanded object metadata will be returned within the `includes` response object, and will also include the ID so that you can match this data object to the original Tweet object. At this time, the only expansion available to endpoints that primarily return user objects is `expansions=pinned_tweet_id`. You will find the expanded Tweet data object living in the `includes` response object. |\n| `max_results`  <br>\u00a0Optional | integer | The maximum number of search results to be returned by a request. A number between 1 and 1000. By default, a request response will return 100 results. |\n| `next_token`  <br>\u00a0Optional | string | This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. |\n| `tweet.fields`  <br>\u00a0Optional | enum (`attachments`, `author_id`, `context_annotations`, `conversation_id`, `created_at`, `edit_controls`, `entities`, `geo`, `id`, `in_reply_to_user_id`, `lang`, `non_public_metrics`, `public_metrics`, `organic_metrics`, `promoted_metrics`, `possibly_sensitive`, `referenced_tweets`, `reply_settings`, `source`, `text`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [Tweet fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) will deliver in each returned pinned Tweet. Specify the desired fields in a comma-separated list without spaces between commas and fields. The Tweet fields will only return if the user has a pinned Tweet and if you've also included the `expansions=pinned_tweet_id` query parameter in your request. While the referenced Tweet ID will be located in the original Tweet object, you will find this ID and all additional Tweet fields in the `includes` data object. |\n| `user.fields`  <br>\u00a0Optional | enum (`created_at`, `description`, `entities`, `id`, `location`, `most_recent_tweet_id`, `name`, `pinned_tweet_id`, `profile_image_url`, `protected`, `public_metrics`, `url`, `username`, `verified`, `verified_type`, `withheld`) | This [fields](https://developer.twitter.com/en/docs/twitter-api/fields) parameter enables you to select which specific [user fields](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) will deliver with each returned users objects. Specify the desired fields in a comma-separated list without spaces between commas and fields. These specified user fields will display directly in the user data objects. |\n",
        "line_start": 501,
        "line_end": 510,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "207": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tExample responses\n\nContent: \n### Example responses  \n* [Default Fields](#tab0)\n* [Optional Fields](#tab1)  \nDefault Fields  \nOptional Fields  \n`{   \"data\": [     {       \"id\": \"2244994945\",       \"name\": \"Developers\",       \"username\": \"XDevelopers\"     },     {       \"id\": \"857699969263964161\",       \"name\": \"Suhem Parack\",       \"username\": \"suhemparack\"     },     {       \"id\": \"2533341854\",       \"name\": \"Chris Park\",       \"username\": \"chrisparkX\"     },     {       \"id\": \"853388192\",       \"name\": \"Haim Vaturi\",       \"username\": \"haimvat\"     },     {       \"id\": \"829457852125306890\",       \"name\": \"ROBLOX Devs\",       \"username\": \"RBXdevelopers\"     },     {       \"id\": \"70915829\",       \"name\": \"Twitter Dev Japan\",       \"username\": \"TwitterDevJP\"     },     {       \"id\": \"1619352801104039936\",       \"name\": \"Rains\u00ae\u2122\u2614\ufe0f\ud83e\udde0 0xdevelopers.eth.eth\",       \"username\": \"0xdevelopersTm\"     },     {       \"id\": \"708786906058756096\",       \"name\": \"Project X Developers\",       \"username\": \"ProXDevelopers\"     },     {       \"id\": \"1315227013028904960\",       \"name\": \"XDevelopersUS\",       \"username\": \"XDevelopersUS\"     },     {       \"id\": \"3296066705\",       \"name\": \"XDevelopers\",       \"username\": \"XDevBrasil\"     },     {       \"id\": \"1234855897370910720\",       \"name\": \"ajX developers\",       \"username\": \"ajXdevelopers\"     },     {       \"id\": \"1453775246\",       \"name\": \"The X Developers\",       \"username\": \"TheXDevelopers\"     },     {       \"id\": \"1513675812486193158\",       \"name\": \"RBLXdevelopers\",       \"username\": \"XdevelopersRbl\"     },     {       \"id\": \"1375178694520627204\",       \"name\": \"XDevelopersUK\",       \"username\": \"XDevelopersUK\"     },     {       \"id\": \"1363113804842881024\",       \"name\": \"xDevelopers\",       \"username\": \"xdevelopers_st\"     },     {       \"id\": \"2885219741\",       \"name\": \"xdevelopers\",       \"username\": \"itdenps\"     },     {       \"id\": \"1684769811539087362\",       \"name\": \"X\",       \"username\": \"xdevelopers_es\"     },     {       \"id\": \"732232220803485696\",       \"name\": \"XDevelopers\",       \"username\": \"XDeveloper_\"     },     {       \"id\": \"831241935675326464\",       \"name\": \"xDevelopers\",       \"username\": \"developers_x\"     },     {       \"id\": \"1580611661169238016\",       \"name\": \"0xspark\",       \"username\": \"0xdevelopers\"     },     {       \"id\": \"2175184873\",       \"name\": \"XeXDevelopers\",       \"username\": \"XeXDevelopers\"     },     {       \"id\": \"1684141917129539585\",       \"name\": \"Izu\",       \"username\": \"XDevelopersJP\"     },     {       \"id\": \"1521381726\",       \"name\": \"SXDevelopers\",       \"username\": \"SonyXDevelopers\"     }   ],   \"meta\": {     \"next_token\": \"5qym3iwm0eyn796h9x2mc2ri54ub5te\"   } }`  \n`{   \"data\": [     {       \"location\": \"127.0.0.1\",       \"name\": \"Developers\",       \"description\": \"The voice of the X Dev team and your official source for updates, news, and events, related to the X API.\",       \"username\": \"XDevelopers\",       \"id\": \"2244994945\"     },     {       \"location\": \"Seattle, WA\",       \"name\": \"Suhem Parack\",       \"description\": \"Partner Engineering @XDevelopers\",       \"username\": \"suhemparack\",       \"id\": \"857699969263964161\"     },     {       \"location\": \"New York, NY\",       \"name\": \"Chris Park\",       \"description\": \"\ud835\udd4f | @X @API @XDevelopers\",       \"username\": \"chrisparkX\",       \"id\": \"2533341854\"     },     {       \"location\": \"Islington, London\",       \"name\": \"Haim Vaturi\",       \"description\": \"@XDevelopers\",       \"username\": \"haimvat\",       \"id\": \"853388192\"     },     {       \"location\": \"Canada\",       \"name\": \"ROBLOX Devs\",       \"description\": \"Follow this account for a lot of cool ROBLOXdev from all kinds of different ROBLOX developers! Not an official @ROBLOX twitter account\",       \"username\": \"RBXdevelopers\",       \"id\": \"829457852125306890\"     },     {       \"location\": \"\u6771\u4eac\u90fd\u6e2f\u533a\",       \"name\": \"Twitter Dev Japan\",       \"description\": \"This account is no longer active. Follow @XDevelopers for updates.\",       \"username\": \"TwitterDevJP\",       \"id\": \"70915829\"     },     {       \"name\": \"Rains\u00ae\u2122\u2614\ufe0f\ud83e\udde0 0xdevelopers.eth.eth\",       \"description\": \"\",       \"username\": \"0xdevelopersTm\",       \"id\": \"1619352801104039936\"     },     {       \"name\": \"Project X Developers\",       \"description\": \"\",       \"username\": \"ProXDevelopers\",       \"id\": \"708786906058756096\"     },     {       \"location\": \"Los Angeles, CA\",       \"name\": \"XDevelopersUS\",       \"description\": \"\",       \"username\": \"XDevelopersUS\",       \"id\": \"1315227013028904960\"     },     {       \"location\": \"Rio de Janeiro & S\u00e3o Paulo\",       \"name\": \"XDevelopers\",       \"description\": \"Contato e Suporte Via Telefone (RJ): 21 980534086 e Via Email: contato@XDevelopers.com.br\",       \"username\": \"XDevBrasil\",       \"id\": \"3296066705\"     },     {       \"location\": \"India\",       \"name\": \"ajX developers\",       \"description\": \"app developernweb designernentrepreneurnmachine learningnAI PIONEERnage just 16\",       \"username\": \"ajXdevelopers\",       \"id\": \"1234855897370910720\"     },     {       \"name\": \"The X Developers\",       \"description\": \"\",       \"username\": \"TheXDevelopers\",       \"id\": \"1453775246\"     },     {       \"name\": \"RBLXdevelopers\",       \"description\": \"\",       \"username\": \"XdevelopersRbl\",       \"id\": \"1513675812486193158\"     },     {       \"location\": \"London, England\",       \"name\": \"XDevelopersUK\",       \"description\": \"\",       \"username\": \"XDevelopersUK\",       \"id\": \"1375178694520627204\"     },     {       \"name\": \"xDevelopers\",       \"description\": \"\",       \"username\": \"xdevelopers_st\",       \"id\": \"1363113804842881024\"     },     {       \"name\": \"xdevelopers\",       \"description\": \"\",       \"username\": \"itdenps\",       \"id\": \"2885219741\"     },     {       \"name\": \"X\",       \"description\": \"\",       \"username\": \"xdevelopers_es\",       \"id\": \"1684769811539087362\"     },     {       \"name\": \"XDevelopers\",       \"description\": \"\",       \"username\": \"XDeveloper_\",       \"id\": \"732232220803485696\"     },     {       \"name\": \"xDevelopers\",       \"description\": \"\",       \"username\": \"developers_x\",       \"id\": \"831241935675326464\"     },     {       \"location\": \"United States\",       \"name\": \"0xspark\",       \"description\": \"\",       \"username\": \"0xdevelopers\",       \"id\": \"1580611661169238016\"     },     {       \"name\": \"XeXDevelopers\",       \"description\": \"\",       \"username\": \"XeXDevelopers\",       \"id\": \"2175184873\"     },     {       \"name\": \"Izu\",       \"description\": \"\",       \"username\": \"XDevelopersJP\",       \"id\": \"1684141917129539585\"     },     {       \"name\": \"SXDevelopers\",       \"description\": \"\",       \"username\": \"SonyXDevelopers\",       \"id\": \"1521381726\"     }   ],   \"meta\": {     \"next_token\": \"5qym3iwm0f05lqu1ezcdkohsl2i4lyq\"   } }`\n",
        "line_start": 539,
        "line_end": 546,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "208": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tResponse fields\n\nContent: \n### Response fields  \n| Name | Type | Description |\n| --- | --- | --- |\n| `id`  <br>\u00a0Default | string | Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. |\n| `name`  <br>\u00a0Default | string | The friendly name of this user, as shown on their profile. |\n| `username`  <br>\u00a0Default | string | The Twitter handle (screen name) of this user. |\n| `created_at` | date (ISO 8601) | Creation time of this account.  <br>  <br>To return this field, add `user.fields=created_at` in the request's query parameter. |\n| `most_recent_tweet_id` | string | The ID of the User's most recent Tweet  <br>  <br>To return this field, add `user.fields=most_recent_tweet_id` in the request's query parameter. |\n| `protected` | boolean | Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).  <br>  <br>To return this field, add `user.fields=protected` in the request's query parameter. |\n| `withheld` | object | Contains withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).  <br>  <br>To return this field, add `user.fields=withheld` in the request's query parameter. |\n| `withheld.country_codes` | array | Provides a list of countries where this user is not available.  <br>  <br>To return this field, add `user.fields=withheld.country_codes` in the request's query parameter. |\n| `withheld.scope` | enum (`tweet`, `user`) | Indicates whether the content being withheld is a Tweet or a user (this API will return `user`).  <br>  <br>To return this field, add `user.fields=withheld.scope` in the request's query parameter. |\n| `location` | string | The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.  <br>  <br>To return this field, add `user.fields=location` in the request's query parameter. |\n| `url` | string | The URL specified in the user's profile, if present.  <br>  <br>To return this field, add `user.fields=url` in the request's query parameter. |\n| `description` | string | The text of this user's profile description (also known as bio), if the user provided one.  <br>  <br>To return this field, add `user.fields=description` in the request's query parameter. |\n| `verified` | boolean | Indicate if this user is a verified Twitter user.  <br>  <br>To return this field, add `user.fields=verified` in the request's query parameter. |\n| `verified_type` | enum (`blue`, `business`, `government`, `none`) | Indicates the type of verification for the Twitter account.  <br>  <br>To return this field, add `user.fields=verified_type` in the request's query parameter. |\n| `entities` | object | This object and its children fields contain details about text that has a special meaning in the user's description.  <br>  <br>To return this field, add `user.fields=entities` in the request's query parameter. |\n| `entities.url` | array | Contains details about the user's profile website. |\n| `entities.url.urls` | array | Contains details about the user's profile website. |\n| `entities.url.urls.start` | integer | The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. |\n| `entities.url.urls.end` | integer | The end position (zero-based) of the recognized user's profile website. This end index is exclusive. |\n| `entities.url.urls.url` | string | The URL in the format entered by the user. |\n| `entities.url.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.url.urls.display_url` | string | The URL as displayed in the user's profile. |\n| `entities.description` | array | Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. |\n| `entities.description.urls` | array | Contains details about any URLs included in the user's description. |\n| `entities.description.urls.start` | integer | The start position (zero-based) of the recognized URL in the user's description. All start indices are inclusive. |\n| `entities.description.urls.end` | integer | The end position (zero-based) of the recognized URL in the user's description. This end index is exclusive. |\n| `entities.description.urls.url` | string | The URL in the format entered by the user. |\n| `entities.description.urls.expanded_url` | string | The fully resolved URL. |\n| `entities.description.urls.display_url` | string | The URL as displayed in the user's description. |\n| `entities.description.hashtags` | array | Contains details about text recognized as a Hashtag. |\n| `entities.description.hashtags.start` | integer | The start position (zero-based) of the recognized Hashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.hashtags.end` | integer | The end position (zero-based) of the recognized Hashtag within the Tweet. This end index is exclusive. |\n| `entities.description.hashtags.hashtag` | string | The text of the Hashtag. |\n| `entities.description.mentions` | array | Contains details about text recognized as a user mention. |\n| `entities.description.mentions.start` | integer | The start position (zero-based) of the recognized user mention within the Tweet. All start indices are inclusive. |\n| `entities.description.mentions.end` | integer | The end position (zero-based) of the recognized user mention within the Tweet. This end index is exclusive. |\n| `entities.description.mentions.username` | string | The part of text recognized as a user mention. |\n| `entities.description.cashtags` | array | Contains details about text recognized as a Cashtag. |\n| `entities.description.cashtags.start` | integer | The start position (zero-based) of the recognized Cashtag within the Tweet. All start indices are inclusive. |\n| `entities.description.cashtags.end` | integer | The end position (zero-based) of the recognized Cashtag within the Tweet. This end index is exclusive. |\n| `entities.description.cashtags.cashtag` | string | The text of the Cashtag. |\n| `profile_image_url` | string | The URL to the profile image for this user, as shown on the user's profile. |\n| `public_metrics` | object | Contains details about activity for this user. |\n| `public_metrics.followers_count` | integer | Number of users who follow this user. |\n| `public_metrics.following_count` | integer | Number of users this user is following. |\n| `public_metrics.tweet_count` | integer | Number of Tweets (including Retweets) posted by this user. |\n| `public_metrics.listed_count` | integer | Number of lists that include this user. |\n| `pinned_tweet_id` | string | Unique identifier of this user's pinned Tweet.  <br>  <br>You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the request's query parameter. |\n| `includes.tweets` | array | When including the `expansions=pinned_tweet_id` parameter, this includes the pinned Tweets attached to the returned users' profiles in the form of [Tweet objects](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet) with their default fields and any additional fields requested using the `tweet.fields` parameter, assuming there is a referenced Tweet present in the returned Tweet(s). |\n| `errors` | object | Contains details about errors that affected any of the requested users. See [Status codes and error messages](https://developer.twitter.com/en/support/twitter-api/error-troubleshooting) for more details. |  \nQuick start\n",
        "line_start": 554,
        "line_end": 608,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "209": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tGetting started with the users search endpoint\n\nContent: \n## Getting started with the users search endpoint  \nThis quick start guide will help you make your first request to the users search endpoints using [Postman](https://developer.twitter.com/en/docs/tools-and-libraries/using-postman).  \nIf you would like to see sample code in different languages, please visit our\u00a0[Twitter API v2 sample code](https://github.com/twitterdev/Twitter-API-v2-sample-code)\u00a0GitHub\u00a0repository.  \n**Note**: This endpoint is available only to developers with Pro access. Sign up for Pro access [here](https://developer.twitter.com/en/portal/products/pro).\n",
        "line_start": 3380,
        "line_end": 3384,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "210": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tGetting started with the users search endpoint\n\tPrerequisites\n\nContent: \n### Prerequisites  \nFor you to be able to complete this guide, you will have need to have a set of [keys and tokens](https://developer.twitter.com/en/docs/authentication), which you can generate by following these steps:  \n1. [Sign up for a developer account](https://developer.twitter.com/en/portal/petition/essential/basic-info).\n2. Create a [Project](https://developer.twitter.com/en/docs/projects) and an associated [developer App](https://developer.twitter.com/en/docs/apps) in the developer portal.  \n3. Navigate to your app's \u201cKeys and tokens\u201d page, and save your credentials in a secure location.\n",
        "line_start": 55,
        "line_end": 60,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "211": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tGetting started with the users search endpoint\n\tSteps to build a users lookup request\n\nContent: \n### Steps to build a users lookup request  \n#### Step one: Start with a tool or library  \nThere are several different tools, code examples, and libraries that you can use to make a request to this endpoint, but we are going to use the Postman tool here to simplify the process.  \nTo load the Twitter API v2 Postman collection into your environment, please click on the following button:  \n[Add Twitter API v2 to Postman](https://t.co/twitter-api-postman)  \nOnce you have the Twitter API v2 collection loaded in Postman, navigate to the GET /users/search.  \n#### Step two: Authenticate your request  \nTo properly make a request to the Twitter API, you need to verify that you have permission to do so. To do this with the GET /users/by endpoint, you must pass your developer App's Bearer Token along with your request.  \nFirst, from within the GET /users/by request in Postman, navigate to the \u201cAuthentication\u201d tab. In the \"Type\" dropdown, select \"Bearer Token\", and then copy and paste your App only Bearer Token from your password manager into the \"Token\" field.  \n#### Step three: Identify and specify the query for which you want to get the Users for  \nYou must specify the query for which you want to get the Users for. In this example, we will get Users for the search term xdevelopers  \nIn Postman, navigate to the \"Params\" tab and enter your query i.e. xdevelopers into the \"Value\" column of the query\u00a0parameter  \n|     |     |\n| --- | --- |\n| **Key** | **Value** |\n| `username` | xdevelopers |  \n#### Step four: Identify and specify which fields you would like to retrieve  \nIf you click the \"Send\" button after step three, you will receive the default [user object](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user) fields in your response: id, name, and username.  \nIf you would like to receive additional fields beyond id, name, and username, you will have to specify those fields in your request with the [field](https://developer.twitter.com/content/developer-twitter/en/docs/twitter-api/data-dictionary/introduction/fields) and/or [expansion](https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction/expansions) parameters.  \nFor this exercise, we will request a three additional sets of fields from different objects:  \n1. The additional user.created\\_at field in the primary user objects.\n2. The associated pinned Tweets\u2019 object\u2019s default fields for the returned users: id and text.\n3. The additional\u00a0 tweet.created\\_at field in the associated Tweet objects.  \nIn Postman, navigate to the \"Params\" tab and add the following key:value pair to the \"Query Params\" table:  \n|     |     |     |\n| --- | --- | --- |\n| **Key** | **Value** | **Returned fields** |\n| `user.fields` | `created_at` | `user.created_at` |\n| `expansions` | `author_id` | tweet.id,\u00a0tweet.text |\n| `tweet.fields` | `created_at` | `includes.users.created_at` |  \nYou should now see the following URL next to the \"Send\" button:  \n`https://api.twitter.com/2/users/search?query=xdevelopers&user.fields=description,location`  \n####\nStep five: Make your request and review your response  \nOnce you have everything set up, hit the \"Send\" button and you will receive the following response:  \n`{     \"data\": [         {             \"location\": \"127.0.0.1\",             \"name\": \"Developers\",             \"description\": \"The voice of the X Dev team and your official source for updates, news, and events, related to the X API.\",             \"username\": \"XDevelopers\",             \"id\": \"2244994945\"         },         {             \"location\": \"Seattle, WA\",             \"name\": \"Suhem Parack\",             \"description\": \"Partner Engineering @XDevelopers\",             \"username\": \"suhemparack\",             \"id\": \"857699969263964161\"         },         {             \"location\": \"New York, NY\",             \"name\": \"Chris Park\",             \"description\": \"\ud835\udd4f | @X @API @XDevelopers\",             \"username\": \"chrisparkX\",             \"id\": \"2533341854\"         },         {             \"location\": \"Islington, London\",             \"name\": \"Haim Vaturi\",             \"description\": \"@XDevelopers\",             \"username\": \"haimvat\",             \"id\": \"853388192\"         },         {             \"location\": \"Canada\",             \"name\": \"ROBLOX Devs\",             \"description\": \"Follow this account for a lot of cool ROBLOXdev from all kinds of different ROBLOX developers! Not an official @ROBLOX twitter account\",             \"username\": \"RBXdevelopers\",             \"id\": \"829457852125306890\"         },         {             \"location\": \"\u6771\u4eac\u90fd\u6e2f\u533a\",             \"name\": \"Twitter Dev Japan\",             \"description\": \"This account is no longer active. Follow @XDevelopers for updates.\",             \"username\": \"TwitterDevJP\",             \"id\": \"70915829\"         },         {             \"name\": \"Rains\u00ae\u2122\u2614\ufe0f\ud83e\udde0 0xdevelopers.eth.eth\",             \"description\": \"\",             \"username\": \"0xdevelopersTm\",             \"id\": \"1619352801104039936\"         },         {             \"name\": \"Project X Developers\",             \"description\": \"\",             \"username\": \"ProXDevelopers\",             \"id\": \"708786906058756096\"         },         {             \"location\": \"Los Angeles, CA\",             \"name\": \"XDevelopersUS\",             \"description\": \"\",             \"username\": \"XDevelopersUS\",             \"id\": \"1315227013028904960\"         },         {             \"location\": \"Rio de Janeiro & S\u00e3o Paulo\",             \"name\": \"XDevelopers\",             \"description\": \"Contato e Suporte Via Telefone (RJ): 21 980534086 e Via Email: contato@XDevelopers.com.br\",             \"username\": \"XDevBrasil\",             \"id\": \"3296066705\"         }     ],     \"meta\": {         \"next_token\": \"5qym3iwo3naekslszn59lxy1d9nmc6q\"     } }`\n",
        "line_start": 63,
        "line_end": 99,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    },
    "212": {
        "content": "Source document: data/platform-docs-versions-english/X_Twitter-API-V2/Users.md\nParagraph location: \n\tGET /2/users/search\n\tNext steps\n\nContent: \n## Next steps  \n[Customize your request using the API Reference](https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference \"Customize your request using the API Reference\")  \n[Reach out to the community for help](https://twittercommunity.com/ \"Reach out to the community for help\")\n",
        "line_start": 137,
        "line_end": 140,
        "url": "https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user),"
    }
}